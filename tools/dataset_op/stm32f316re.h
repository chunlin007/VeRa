/*
 * Author: Chunlin Wang
 * Email: chunlin_wang01@163.com
 * Date: 2022-10-01
 * Description: Data table information help to construct database 
 * using for stm32f316xd/e
 * TODO extract register info using NLP/ML technology
 * 
 * The meaning of the info array and val are:
 * 1、stm32f316re_base_xxx: the base address of peripheral
 * 2、stm32f316re_base_xxx: the size of peripheral
 * 3、stm32f316re_info_xxx contain the basic info of the register, 
 * 		{reset value, type, read permisson, write permision}-->end by 0xf
 * 4、stm32f316re_val_xxx contain the the effective value of register,
 *  	{effective value, ...}->end by 0xffffffff
 * 5、stm32f316re_base: contains base address of every peripheral
 * 6、stm32f316re_base: contains size of every peripheral
 * 7、stm32f316re_info: a pointer array which point to the <2>
 * 8、stm32f316re_val: a pointer array which point to the <3>
 */


#ifndef __DATA_TABLE_STM32F316RE__
#define __DATA_TABLE_STM32F316RE__

#include <stdint.h>
#ifndef PERI_NUM
#define PERI_NUM 0x3f
#endif
#ifndef REG_NUM
#define REG_NUM 0x3ff
#endif
#ifndef VALUE_NUM
#define VALUE_NUM 0xff
#endif
#ifndef NUM_EFF_VAL 
#define NUM_EFF_VAL 0x20
#endif
#ifndef NUM_BASIC_INFO
#define NUM_BASIC_INFO 0x4
#endif

#define KB 0x400
#define MB 0x100000
/******************** TIM2/TIM3/TIM4 *********************/
//register information
#define stm32f316re_base_tim2 0x40000000
#define stm32f316re_base_tim3 0x40000400
#define stm32f316re_base_tim4 0x40000800
#define stm32f316re_size_tim2 KB
#define stm32f316re_size_tim3 KB
#define stm32f316re_size_tim4 KB
const uint32_t stm32f316re_info_tim2[REG_NUM][NUM_BASIC_INFO] = {
//TODO To change the readable ans writeable permission.
    {0x00000123, 3, 4, 5}, //0x00
    {0x00000456, 6, 7, 5}, //0x04
    //{0x00000000, 1, 1, 1}, //0x00
    //{0x00000000, 1, 1, 1}, //0x04
    {0x00000000, 1, 1, 1}, //0x08
    {0x00000000, 1, 1, 1}, //0x0c
    {0x00000000, 2, 1, 1}, //0x10
    {0x00000000, 1, 1, 1}, //0x14
    {0x00000000, 1, 1, 1}, //0x18
    {0x00000000, 1, 1, 1}, //0x1c
    {0x00000000, 1, 1, 1}, //0x20
    {0x00000000, 1, 1, 1}, //0x24
    {0x00000000, 1, 1, 1}, //0x28
    {0xffffffff, 1, 1, 1}, //0x2c
    {0x00000000, 9, 1, 1}, //0x30  type == 9 invalid
    {0x00000000, 1, 1, 1}, //0x34  
    {0x00000000, 1, 1, 1}, //0x38
    {0x00000000, 1, 1, 1}, //0x3c
    {0x00000000, 1, 1, 1}, //0x40
    {0x00000000, 9, 1, 1}, //0x44
    {0x00000000, 1, 1, 1}, //0x48
    {0x00000000, 3, 1, 1}, //0x4c
    {0x00000000, 9, 0xf, 0xf}, //end sign- read == 0xf and write == 0xf
};
//effective values
const uint32_t stm32f316re_val_tim2[REG_NUM][NUM_EFF_VAL] = {

    {   //0x00
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
        0x00000010, 0x00000060, 0x00000080,
        0x00000300, 0x00000800
    },{ //0x04
        0x00000008,
        0x00000070, 0x00000080
    },{ //0x08
        0x00000007, 0x00000008,
        0x00000070, 0x00000080,
        0x00000f00,
        0x00003000, 0x00004000, 0x00008000,
        0x00010000
    },{ //0x0c
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
        0x00000010, 0x00000040,
        0x00000100, 0x00000200, 0x00000400, 0x00000800,
        0x00001000, 0x00002000, 0x00004000,
    },{ //0x10
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
        0x00000010, 0x00000040, 
        0x00000200, 0x00000400, 0x00000800,
        0x00001000
    },{ //0x14
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
        0x00000010, 0x00000040
    },{ //0x18
        0x00000003, 0x0000000c,
        0x000000f0,
        0x00000300, 0x00000c00,
        0x0000f000
    },{ //0x1c
        0x00000003, 0x0000000c,
        0x000000f0,
        0x00000300, 0x00000c00,
        0x0000f000
    },{ //0x20
        0x00000001, 0x00000002, 0x00000004,
        0x00000010, 0x00000020, 0x00000080,
        0x00000100, 0x00000200, 0x00000800,
        0x00001000, 0x00002000, 0x00008000
    },{ //0x24
        0x0000ffff, 0x0fff0000, 0xf0000000
    },{ //0x28
        0x0000ffff
    },{ //0x2c
        0x0000ffff, 0xffff0000
    },{ //0x30
    },{ //0x34
        0x0000ffff, 0xffff0000
    },{ //0x38
        0x0000ffff, 0xffff0000
    },{ //0x3c
        0x0000ffff, 0xffff0000
    },{ //0x40
        0x0000ffff, 0xffff0000
    },{ //0x44
    },{ //0x48
        0x0000001f, 0x00001f00
    },{ //0x4c
        0x000000f, 0x000000f0, 0x00000f00, 0x0000f000
    },{	//end-sign - double 0xffffffff
		0xfffffff, 0xffffffff
	}
};

/******************** TIM6/TIM7 *********************/
//register information
#define stm32f316re_base_tim6 0x40001000
#define stm32f316re_base_tim7 0x40001400
#define stm32f316re_size_tim6 KB
#define stm32f316re_size_tim7 KB
const uint32_t stm32f316re_info_tim6[REG_NUM][NUM_BASIC_INFO] = {

    {0x00000000, 1, 1, 1}, //0x00
    {0x00000000, 1, 1, 1}, //0x04
    {0x00000000, 9, 1, 1}, //0x08
    {0x00000000, 1, 1, 1}, //0x0c
    {0x00000000, 2, 1, 1}, //0x10
    {0x00000000, 1, 1, 1}, //0x14
    {0x00000000, 9, 1, 1}, //0x18
    {0x00000000, 9, 1, 1}, //0x1c
    {0x00000000, 9, 1, 1}, //0x20
    {0x00000000, 3, 1, 1}, //0x24
    {0x00000000, 3, 1, 1}, //0x28
    {0xffffffff, 3, 1, 1}, //0x2c
    {0x00000000, 9, 0xf, 0xf}, //end sign
};
//effective values
const uint32_t stm32f316re_val_tim6[REG_NUM][NUM_EFF_VAL] = {

    {   //0x00
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
        0x00000080,
        0x00000800
    },{ //0x04
        0x00000070
    },{ //0x08
    },{ //0x0c
        0x00000001, 
        0x00000100
    },{ //0x10
        0x00000001
    },{ //0x14
        0x00000001
    },{ //0x18
    },{ //0x1c
    },{ //0x20
    },{ //0x24
        0x0000ffff
    },{ //0x28
        0x0000ffff
    },{ //0x2c
        0x0000ffff
    },{ //end-sign
		0xffffffff,0xffffffff
	}
};


/******************** RTC *********************/
//register information
#define stm32f316re_base_rtc 0x40028000
#define stm32f316re_size_rtc KB
const uint32_t stm32f316re_info_rtc[REG_NUM][NUM_BASIC_INFO] = {

    {0x00000000, 1, 1, 1}, //0x00
    {0x00002101, 3, 1, 1}, //0x04
    {0x00000000, 1, 1, 1}, //0x08
    {0x00000007, 2, 1, 1}, //0x0c
    {0x007f00ff, 3, 1, 1}, //0x10
    {0x0000ffff, 3, 1, 1}, //0x14
    {0x00000000, 9, 1, 1}, //0x18
    {0x00000000, 1, 1, 1}, //0x1c
    {0x00000000, 1, 1, 1}, //0x20
    {0x00000000, 1, 1, 1}, //0x24
    {0x00000000, 3, 1, 1}, //0x28
    {0x00000000, 1, 1, 1}, //0x2c
    {0x00000000, 3, 1, 1}, //0x30
    {0x00000000, 3, 1, 1}, //0x34
    {0x00000000, 3, 1, 1}, //0x38
    {0x00000000, 3, 1, 1}, //0x3c
    {0x00000000, 1, 1, 1}, //0x40
    {0x00000000, 3, 1, 1}, //0x44
    {0x00000000, 3, 1, 1}, //0x48
	/* 
	 * 0x50-0x8c rtc-backup register 
	 * here we just don't consider it.
	 */
	//[0x14 ... 0x23] = {0x00000000, 3, 0},
    {0x00000000, 9, 0xf, 0xf}, //end sign
};
//effective values
const uint32_t stm32f316re_val_rtc[REG_NUM][NUM_EFF_VAL] = {

    {   //0x00
		0x0000000f,
		0x00000070, 
		0x00000f00,
		0x00007000,
		0x000f0000,
		0x00300000, 0x00400000
    },{ //0x04
        0x0000000f,
        0x00000030, 
		0x00000f00,
		0x00001000, 0x0000e000,
		0x000f0000,
		0x00f00000
    },{ //0x08
        0x00000007, 0x00000008,
        0x00000001, 0x00000020, 0x00000040,
        0x00000100, 0x00000200, 0x00000400, 0x00000800,
        0x00001000, 0x00002000, 0x00004000, 0x00008000,
        0x00010000, 0x00020000, 0x00040000, 0x00080000,
		0x00100000, 0x00600000, 0x00800000
    },{ //0x0c
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
        0x00000010, 0x00000020, 0x00000040, 0x00000080,
        0x00000100, 0x00000200, 0x00000400, 0x00000800,
        0x00001000, 0x00002000, 0x00004000, 0x00008000,
		0x00010000
    },{ //0x10
		0x00007fff, 0x003f8000
    },{ //0x14
		0x0000ffff
    },{ //0x18
    },{ //0x1c
		0x0000000f, 
		0x00000070, 0x00000080, 
		0x00000f00,
		0x00007000, 0x00008000,
		0x000f0000,
		0x00300000, 0x00400000, 0x00800000,
		0x0f000000,
		0x30000000, 0x40000000, 0x80000000
    },{ //0x20
		0x0000000f,
		0x00000070, 0x00000080,
		0x00000f00,
		0x00007000, 0x00008000,
		0x000f0000, 
		0x00300000, 0x00400000, 0x00800000,
		0x0f000000, 
		0x30000000, 0x40000000, 0x80000000
    },{ //0x24
		0x000000ff
    },{ //0x28
        0x0000ffff
    },{ //0x2c
        0x0000ffff
    },{ //0x30
		0x0000000f, 
		0x00000070,
		0x00000f00, 
		0x00007000,
		0x000f0000,
		0x00300000, 0x00400000
    },{ //0x34
        0x0000000f, 
		0x00000070,
		0x00000f00,
		0x00007000,
		0x000f0000,
		0x00300000, 0x00400000
    },{ //0x38
        0x0000ffff
    },{ //0x3c
        0x000001ff,
		0x00002000, 0x00004000, 0x00008000
    },{ //0x40
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000700,
		0x00001800, 0x00006000, 0x00008000,
		0x00040000, 0x00080000,
		0x00100000, 0x00200000, 0x00400000, 0x00800000
    },{ //0x44
		0x00007fff,
		0x0f000000
    },{ //0x48
		0x00007fff,
		0x0f000000
    },{ //end-sign
		0xffffffff, 0xffffffff
	}
};


/******************** WWDG *********************/
//register information
#define stm32f316re_base_wwdg 0x40002c00
#define stm32f316re_size_wwdg KB
const uint32_t stm32f316re_info_wwdg[REG_NUM][NUM_BASIC_INFO] = {

  	{0x0000007f, 1, 1, 1}, //0x00
    {0x0000007f, 1, 1, 1}, //0x04
    {0x00000000, 2, 1, 1}, //0x08
    {0x00000000, 9, 0xf, 0xf}, //end sign
};
//effective values
const uint32_t stm32f316re_val_wwdg[REG_NUM][NUM_EFF_VAL] = {

    {   //0x00
        0x0000007f, 0x00000080,
    },{ //0x04
        0x0000007f, 0x00000080,
		0x00000100, 0x00000200
    },{ //0x08
        0x00000001
    },{ //end-sign
        0xffffffff, 0xffffffff
    }
};


/******************** IWDG *********************/
//register information
#define stm32f316re_base_iwdg 0x40003000
#define stm32f316re_size_iwdg KB
const uint32_t stm32f316re_info_iwdg[REG_NUM][NUM_BASIC_INFO] = {

    {0x00000000, 1, 1, 1}, //0x00
    {0x00000000, 1, 1, 1}, //0x04
    {0x00000fff, 1, 1, 1}, //0x08
    {0x00000000, 2, 1, 1}, //0x0c
    {0x00000fff, 1, 1, 1}, //0x10
    {0x00000000, 9, 0xf, 0xf}, //end sign
};
//effective values
const uint32_t stm32f316re_val_iwdg[REG_NUM][NUM_EFF_VAL] = {

    {   //0x00
		0x0000ffff, 0x0000aaaa
    },{ //0x04
        0x00000007
    },{ //0x08
		0x00000fff
    },{ //0x0c
        0x00000001, 0x00000002, 0x00000004
    },{ //0x10
        0x00000fff
    },{ //end-sign
        0xffffffff, 0xffffffff
    }
};


/******************** I2S2-3ext/SPI2-3/I2S2-3/ *********************/
//register information
#define stm32f316re_base_i2s2ext 0x40003400
#define stm32f316re_base_spi2 0x40003800
#define stm32f316re_base_spi3 0x40003c00
#define stm32f316re_base_i2s3ext 0x40004000
#define stm32f316re_size_i2s2ext KB
#define stm32f316re_size_spi2 KB 
#define stm32f316re_size_spi3 KB 
#define stm32f316re_size_i2s3ext KB 
const uint32_t stm32f316re_info_spi2[REG_NUM][NUM_BASIC_INFO] = {

    {0x00000000, 1, 1, 1}, //0x00
    {0x00000700, 1, 1, 1}, //0x04
    {0x00000020, 2, 1, 1}, //0x08
    {0x00000000, 3, 1, 1}, //0x0c
    {0x00000007, 1, 1, 1}, //0x10
    {0x00000000, 1, 1, 1}, //0x14
    {0x00000000, 1, 1, 1}, //0x18
    {0x00000000, 1, 1, 1}, //0x1c
    {0x00000010, 1, 1, 1}, //0x20
    {0x00000000, 9, 0xf, 0xf}, //end sign
};
//effective values
const uint32_t stm32f316re_val_spi2[REG_NUM][NUM_EFF_VAL] = {

    {   //0x00
        0x00000001, 0x00000002, 0x00000004,
        0x00000038, 0x00000040, 0x00000080,
        0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00001000, 0x00002000, 0x00004000, 0x00008000
    },{ //0x04
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
        0x000000f0, 
		0x00000100, 0x00000200, 0x00000400
    },{ //0x08
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000100, 0x00000600,
		0x00001800
    },{ //0x0c
		0x0000ffff
    },{ //0x10
		0x0000ffff
    },{ //0x14
		0x0000ffff
    },{ //0x18
		0x0000ffff
    },{ //0x1c
		0x00000001, 0x00000006, 0x00000008,
		0x00000030, 0x00000080,
		0x00000300, 0x00000400, 0x00000800
    },{ //0x20
		0x000000ff,
		0x00000100, 0x00000200
    },{ //end-sign
		0xffffffff, 0xffffffff
    }
};


/******************** USART2-3/UART4-5 *********************/
//register information
#define stm32f316re_base_usart3 0x40004400
#define stm32f316re_base_usart2 0x40004800
#define stm32f316re_base_uart4 0x40004c00
#define stm32f316re_base_uart5 0x40005000
#define stm32f316re_size_usart3 KB 
#define stm32f316re_size_usart2 KB
#define stm32f316re_size_uart4 KB 
#define stm32f316re_size_uart5 KB 
const uint32_t stm32f316re_info_usart2[REG_NUM][NUM_BASIC_INFO] = {

    {0x00000000, 1, 1, 1}, //0x00
    {0x00000000, 1, 1, 1}, //0x04
    {0x00000000, 1, 1, 1}, //0x08
    {0x00000000, 3, 1, 1}, //0x0c
    {0x00000000, 3, 1, 1}, //0x10
    {0x00000000, 3, 1, 1}, //0x14
    {0x00000000, 1, 1, 1}, //0x18
    {0x02000000, 1, 1, 1}, //0x1c
    {0x00000000, 1, 1, 1}, //0x20
    {0x00000000, 3, 1, 1}, //0x24
    {0x00000000, 3, 1, 1}, //0x28
    {0x00000000, 9, 0xf, 0xf}, //end sign
};
//effective values
const uint32_t stm32f316re_val_usart2[REG_NUM][NUM_EFF_VAL] = {

    {   //0x00
        0x00000001, 0x00000004, 0x00000008,
        0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00001000, 0x00002000, 0x00004000, 0x00008000,
		0x00010000, 0x00020000, 0x00040000, 0x00080000,
		0x00100000, 0x00200000, 0x00400000, 0x00800000,
		0x01000000, 0x02000000, 0x04000000, 0x08000000,
		0x10000000
    },{ //0x04
		0x00000010, 0x00000020, 0x00000040,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00003000, 0x00004000, 0x00008000,
		0x00010000, 0x00020000, 0x00040000, 0x00080000,
		0x00100000, 0x00200000, 0x00400000, 0x00800000,
		0x0f000000,
		0xf0000000
    },{ //0x08
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
        0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00001000, 0x00002000, 0x00004000, 0x00008000,
		0x000e0000,
		0x00300000, 0x00400000
    },{ //0x0c
		0x0000ffff
    },{ //0x10
		0x000000ff, 0x0000ff00
    },{ //0x14
		0x00ffffff, 0xff000000
    },{ //0x18
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
        0x00000010, 
    },{ //0x1c
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
        0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00002000, 0x00004000, 0x00008000,
		0x00010000, 0x00020000, 0x00040000, 0x00080000,
		0x00100000, 0x00200000, 0x00400000
    },{ //0x20
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
        0x00000010, 0x00000040,
        0x00000100, 0x00000200, 0x00000800,
        0x00001000,
		0x00020000,
		0x00100000
    },{ //0x24
        0x000000ff
    },{ //0x28
        0x000000ff
    },{ //end-sign
		0xffffffff, 0xffffffff
    }
};


/******************** I2C1-2 *********************/
//register information
#define stm32f316re_base_i2c1 0x40005400
#define stm32f316re_base_i2c2 0x40005800
#define stm32f316re_size_i2c1 KB 
#define stm32f316re_size_i2c2 KB 
const uint32_t stm32f316re_info_i2c1[REG_NUM][NUM_BASIC_INFO] = {

    {0x00000000, 1, 1, 1}, //0x00
    {0x00000000, 1, 1, 1}, //0x04
    {0x00000000, 1, 1, 1}, //0x08
    {0x00000000, 1, 1, 1}, //0x0c
    {0x00000000, 3, 1, 1}, //0x10
    {0x00000000, 3, 1, 1}, //0x14
    {0x00000001, 2, 1, 1}, //0x18
    {0x00000000, 1, 1, 1}, //0x1c
    {0x00000000, 1, 1, 1}, //0x20
    {0x00000000, 3, 1, 1}, //0x24
    {0x00000000, 3, 1, 1}, //0x28
    {0x00000000, 9, 0xf, 0xf}, //end sign
};
//effective values
const uint32_t stm32f316re_val_i2c1[REG_NUM][NUM_EFF_VAL] = {

    {   //0x00
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
        0x00000010, 0x00000020, 0x00000040, 0x00000080,
        0x00000f00,
		0x00001000, 0x00004000, 0x00000800,
		0x00010000, 0x00020000, 0x00040000, 0x00080000,
		0x00100000, 0x00200000, 0x00400000, 0x00800000
    },{ //0x04
		0x000003ff, 0x00000400, 0x00000800,
		0x00001000, 0x00002000, 0x00004000, 0x00008000,
		0x00ff0000, 
		0x01000000, 0x02000000, 0x04000000
    },{ //0x08
		0x000003ff, 0x00000400, 
		0x00008000
    },{ //0x0c
		0x000000fe, 
		0x00000700,
		0x00008000
    },{ //0x10
		0x000000ff,
		0x0000ff00,
		0x000f0000,
		0x00f00000,
		0xf0000000
    },{ //0x14
		0x00000fff, 
		0x00001000, 0x00008000,
		0x0fff0000, 
		0x80000000
    },{ //0x18
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
        0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00001000, 0x00002000, 0x00008000,
		0x00010000,
		0x00fe0000
    },{ //0x1c
		0x00000008,
		0x00000010, 0x00000020,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00001000, 0x00002000
    },{ //0x20
		0x000000ff
    },{ //0x24
        0x0000ffff
    },{ //0x28
        0x0000ffff
    },{ //end-sign
		0xffffffff, 0xffffffff
    }
};


/******************** USB device fs/USB/CAN SRAM *********************/
/*
 * The USB and CAN both use the same mmio resigister, so here we should 
 * deal with in a special method.
 */
//register information
#define stm32f316re_base_usbfs 0x40005c00
#define stm32f316re_base_usbsram 0x40006000
#define stm32f316re_size_usbfs KB 
#define stm32f316re_size_usbsram KB
//USB
const uint32_t stm32f316re_info_usbfs[REG_NUM][NUM_BASIC_INFO] = {

    {0x00000000, 1, 1, 1}, //0x00 
    {0x00000000, 1, 1, 1}, 
    {0x00000000, 1, 1, 1}, 
    {0x00000000, 1, 1, 1}, 
    {0x00000000, 1, 1, 1}, 
    {0x00000000, 1, 1, 1}, 
    {0x00000000, 1, 1, 1}, 
    {0x00000000, 1, 1, 1}, //0x1c
	//reserved 0x20-0x3f
    [0x10] = {0x00000003, 1, 1, 1}, //0x40
    [0x11] = {0x00000000, 2, 1, 1}, //0x44
    [0x12] = {0x00000000, 2, 1, 1},  //0x48
    [0x13] = {0x00000000, 3, 1, 1}, //0x4c
    [0x14] = {0x00000000, 2, 1, 1}, //0x50
    [0x15] = {0x00000000, 3, 1, 1}, //0x54
    {0x00000000, 9, 0xf, 0xf}, //end sign
};
//effective values
//USB
const uint32_t stm32f316re_val_usbfs[REG_NUM][NUM_EFF_VAL] = {
	
	{ //0x00
		0x0000000f, 
		0x00000030, 0x00000040, 0x00000080,
		0x00000100, 0x00000600, 0x00000800,
		0x00003000, 0x00004000, 0x00008000
	},{ //0x04
		0x0000000f, 
		0x00000030, 0x00000040, 0x00000080,
		0x00000100, 0x00000600, 0x00000800,
		0x00003000, 0x00004000, 0x00008000
	},{ //0x08
		0x0000000f, 
		0x00000030, 0x00000040, 0x00000080,
		0x00000100, 0x00000600, 0x00000800,
		0x00003000, 0x00004000, 0x00008000
	},{ //0x0c
		0x0000000f, 
		0x00000030, 0x00000040, 0x00000080,
		0x00000100, 0x00000600, 0x00000800,
		0x00003000, 0x00004000, 0x00008000
	},{ //0x10
		0x0000000f, 
		0x00000030, 0x00000040, 0x00000080,
		0x00000100, 0x00000600, 0x00000800,
		0x00003000, 0x00004000, 0x00008000
	},{ //0x14
		0x0000000f, 
		0x00000030, 0x00000040, 0x00000080,
		0x00000100, 0x00000600, 0x00000800,
		0x00003000, 0x00004000, 0x00008000
	},{ //0x18
		0x0000000f, 
		0x00000030, 0x00000040, 0x00000080,
		0x00000100, 0x00000600, 0x00000800,
		0x00003000, 0x00004000, 0x00008000
	},{ //0x1c
		0x0000000f, 
		0x00000030, 0x00000040, 0x00000080,
		0x00000100, 0x00000600, 0x00000800,
		0x00003000, 0x00004000, 0x00008000
	},
	//0x20-0x3f - reserved
	[0x10] = { //0x40
		0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000020, 0x00000080,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00001000, 0x00002000, 0x00004000, 0x00008000,
	},[0x11] = { //0x44
		0x0000000f, 
		0x00000010, 0x00000080,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00001000, 0x00002000, 0x00004000, 0x00008000,
	},[0x12] = { //0x48
		0x000007ff,
		0x00001800,
		0x00002000, 0x00004000, 0x00008000
	},[0x13] = {	//0x4c
		0x0000007f, 0x00000080
	},[0x14] = {	//0x50
		0x0000fff8
	},[0x15] = {	//0x54
    	0x00000001, 0x00000002, 0x00000008,
		0x000000f0
	},{ //end-sign
		0xffffffff, 0xffffffff
	}
};


/******************** bxCAN *********************/
//register information
#define stm32f316re_base_bxcan 0x40006400
#define stm32f316re_size_bxcan KB
const uint32_t stm32f316re_info_bxcan[REG_NUM][NUM_BASIC_INFO] = {

	//CAN
    {0x00010020, 1, 1, 1}, //0x00
    {0x00000c02, 2, 1, 1}, //0x04
    {0x1c000000, 2, 1, 1}, //0x08
    {0x00000000, 3, 1, 1}, //0x0c
    {0x00000000, 2, 1, 1}, //0x10
    {0x00000000, 1, 1, 1}, //0x14
    {0x00000000, 2, 1, 1}, //0x18
    {0x01230000, 3, 1, 1}, //0x1c
	//CAN mail-box register
    [0x60] = {0x00000000, 1, 1, 1}, //0x180
    [0x61] = {0x00000000, 1, 1, 1}, //0x184
    [0x62] = {0x00000000, 3, 1, 1}, //0x188
    [0x63] = {0x00000000, 3, 1, 1}, //0x18c
    [0x64] = {0x00000000, 1, 1, 1}, //0x190
    [0x65] = {0x00000000, 1, 1, 1}, //0x194
    [0x66] = {0x00000000, 3, 1, 1}, //0x198
    [0x67] = {0x00000000, 3, 1, 1}, //0x19c
    [0x68] = {0x00000000, 1, 1, 1}, //0x1a0
    [0x69] = {0x00000000, 1, 1, 1}, //0x1a4
    [0x6a] = {0x00000000, 3, 1, 1}, //0x1a8
    [0x6b] = {0x00000000, 3, 1, 1}, //0x1ac
    [0x6c] = {0x00000000, 1, 1, 1}, //0x1b0
    [0x6d] = {0x00000000, 1, 1, 1}, //0x1b4
    [0x6e] = {0x00000000, 3, 1, 1}, //0x1b8
    [0x6f] = {0x00000000, 3, 1, 1}, //0x1bc
    [0x70] = {0x00000000, 1, 1, 1}, //0x1c0
    [0x71] = {0x00000000, 1, 1, 1}, //0x1c4
    [0x72] = {0x00000000, 3, 1, 1}, //0x1c8
    [0x73] = {0x00000000, 3, 1, 1}, //0x1cc
    [0x80] = {0x2a1c0e01, 1, 1, 1}, //0x200
    [0x81] = {0x00000000, 1, 1, 1}, //0x204
    [0x83] = {0x00000000, 1, 1, 1}, //0x20c
    [0x85] = {0x00000000, 1, 1, 1}, //0x214
    [0x87] = {0x00000000, 1, 1, 1}, //0x21c
	/*
    [0x90 ... 0xab] = {0x00000000, 1, 0}, //0x240 -0x2ac
	*/
    {0x00000000, 9, 0xf, 0xf}, //end sign
};
//effective values
const uint32_t stm32f316re_val_bxcan[REG_NUM][NUM_EFF_VAL] = {

	//CAN
    {   //0x00
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
        0x00000010, 0x00000020, 0x00000040, 0x00000080,
        0x00008000,
		0x00010000
    },{ //0x04
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
        0x00000010, 
		0x00000100, 0x00000200, 0x00000400, 0x00000800
    },{ //0x08
		0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000080, 
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00008000,
		0x00010000, 0x00020000, 0x00040000, 0x00080000,
		0x00800000, 
		0x03000000,
		0x1c000000,
		0xe0000000
    },{ //0x0c
		0x00000003, 0x00000008,
		0x00000010, 0x00000020
    },{ //0x10
		0x00000003, 0x00000008,
		0x00000010, 0x00000020
    },{ //0x14
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
        0x00000010, 0x00000020, 0x00000040,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00008000,
		0x00010000, 0x00020000
    },{ //0x18
		0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000070,
		0x00ff0000, 
		0xff000000
    },{ //0x1c
		0x000003ff, 
		0x000f0000, 0x00700000,
		0x00300000, 
		0x04000000, 0x80000000
    },
	[0x60] = { //0x180
		0x00000001, 0x00000002, 0x00000004,
		0x001fff80,
		0xffe00000
    },[0x61] = { //0x184
		0x0000000f,
		0x00000100,
		0xffff0000
    },[0x62] = { //0x188
        0x000000ff, 0x0000ff00, 0x00ff0000, 0xff000000
    },[0x63] = { //0x18c
        0x000000ff, 0x0000ff00, 0x00ff0000, 0xff000000
    },[0x64] = { //0x190
		0x00000001, 0x00000002, 0x00000004,
		0x001fff80,
		0xffe00000
    },[0x65] = { //0x194
		0x0000000f,
		0x00000100,
		0xffff0000
    },[0x66] = { //0x198
        0x000000ff, 0x0000ff00, 0x00ff0000, 0xff000000
    },[0x67] = { //0x19c
        0x000000ff, 0x0000ff00, 0x00ff0000, 0xff000000
    },[0x68] = { //0x1a0
		0x00000001, 0x00000002, 0x00000004,
		0x001fff80,
		0xffe00000
    },[0x69] = { //0x1a4
		0x0000000f,
		0x00000100,
		0xffff0000
    },[0x6a] = { //0x1a8
        0x000000ff, 0x0000ff00, 0x00ff0000, 0xff000000
    },[0x6b] = { //0x1ac
        0x000000ff, 0x0000ff00, 0x00ff0000, 0xff000000
    },[0x6c] = { //0x1b0
		0x00000002, 0x00000004,
		0x001fff80,
		0xffe00000
    },[0x6d] = { //0x1b4
		0x0000000f,
		0x00000100,
		0xffff0000
    },[0x6e] = { //0x1b8
        0x000000ff, 0x0000ff00, 0x00ff0000, 0xff000000
    },[0x6f] = { //0x1bc
        0x000000ff, 0x0000ff00, 0x00ff0000, 0xff000000
    },[0x70] = { //0x1c0
		0x00000002, 0x00000004,
		0x001fff80,
		0xffe00000
    },[0x71] = { //0x1c4
		0x0000000f,
		0x00000100,
		0xffff0000
    },[0x72] = { //0x1c8
        0x000000ff, 0x0000ff00, 0x00ff0000, 0xff000000
    },[0x73] = { //0x1cc
        0x000000ff, 0x0000ff00, 0x00ff0000, 0xff000000
    },
	//0x1d0-0x1ff rserved
	[0x80] = { //0x200
        0x00000001
    },[0x81] = { //0x204
		0x00003fff
    },[0x82] = { //0x208
    },[0x83] = { //0x20c
		0x00003fff
    },[0x84] = { //0x210
	},[0x85] = { //0x214
		0x00003fff
	},[0x86] = {
	},[0x87] = { //0x21c
		0x00003ff
	},
	/*
	//0x224-0x23f reserved
	[0x90 ... 0xc7] = { //0x240
   		0xffffffff
	},
	*/
	{ //end-sign
		0xffffffff, 0xffffffff
	}
};


/******************** PWR *********************/
//register information
#define stm32f316re_base_pwr 0x40007000
#define stm32f316re_size_pwr KB
const uint32_t stm32f316re_info_pwr[REG_NUM][NUM_BASIC_INFO] = {

    {0x00000000, 1, 1, 1}, //0x00
    {0x00000000, 4, 1, 1}, //0x04
    {0x00000000, 9, 0xf, 0xf}, //end sign
};
//effective values
const uint32_t stm32f316re_val_pwr[REG_NUM][NUM_EFF_VAL] = {

    {   //0x00
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x000000e0,
		0x00000100
    },{ //0x04
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000100, 0x00000200, 0x00000400
    },{ //end-sign
		0xffffffff, 0xffffffff
    }
};


/******************** DAC1 *********************/
//register information
#define stm32f316re_base_dac1 0x40007400
#define stm32f316re_size_dac1 KB
const uint32_t stm32f316re_info_dac1[REG_NUM][NUM_BASIC_INFO] = {

    {0x00000000, 1, 1, 1}, //0x00
    {0x00000000, 1, 1, 1}, //0x04
    {0x00000000, 3, 1, 1}, //0x08
    {0x00000000, 3, 1, 1}, //0x0c
    {0x00000000, 3, 1, 1}, //0x10
    {0x00000000, 3, 1, 1}, //0x14
    {0x00000000, 3, 1, 1}, //0x18
    {0x00000000, 3, 1, 1}, //0x1c
    {0x00000000, 3, 1, 1}, //0x20
    {0x00000000, 3, 1, 1}, //0x24
    {0x00000000, 3, 1, 1}, //0x28
    {0x00000000, 3, 1, 1}, //0x2c
    {0x00000000, 3, 1, 1}, //0x30
    {0x00000000, 2, 1, 1}, //0x34
    {0x00000000, 9, 0xf, 0xf}, //end sign
};
//effective values
const uint32_t stm32f316re_val_dac1[REG_NUM][NUM_EFF_VAL] = {

    {   //0x00
        0x00000001, 0x00000002, 0x00000004, 
		0x00000038, 0x000000c0,
		0x00000f00,
		0x00001000, 0x00002000,
		0x00010000, 0x00020000, 0x000400000,
		0x00380000, 0x00c00000,
		0x0f000000,
		0x10000000, 0x20000000
    },{ //0x04
		0x00000001, 0x00000002
    },{ //0x08
		0x00000fff
    },{ //0x0c
		0x0000fff0
    },{ //0x10
		0x000000ff
    },{ //0x14
		0x00000fff
    },{ //0x18
		0x0000fff0
    },{ //0x1c
		0x000000ff
    },{ //0x20
		0x00000fff,
		0x0fff0000
    },{ //0x24
		0x0000fff0, 0xfff00000
    },{ //0x28
        0x000000ff, 0x0000ff00
    },{ //0x2c
		0x00000fff,
    },{ //0x30
		0x00000fff,
    },{ //0x34
		0x00002000,
		0x20000000
    },{ //end-sign
		0xffffffff, 0xffffffff
    }
};


/******************** I2C3 *********************/
//register information
#define stm32f316re_base_i2c3 0x40007800
#define stm32f316re_size_i2c3 KB
const uint32_t stm32f316re_info_i2c3[REG_NUM][NUM_BASIC_INFO] = {

    {0x00000000, 1, 1, 1}, //0x00
    {0x00000000, 1, 1, 1}, //0x04
    {0x00000000, 1, 1, 1}, //0x08
    {0x00000000, 1, 1, 1}, //0x0c
    {0x00000000, 3, 1, 1}, //0x10
    {0x00000000, 3, 1, 1}, //0x14
    {0x00000001, 2, 1, 1}, //0x18
    {0x00000000, 1, 1, 1}, //0x1c
    {0x00000000, 3, 1, 1}, //0x20
    {0x00000000, 3, 1, 1}, //0x24
    {0x00000000, 3, 1, 1}, //0x28
    {0x00000000, 9, 0xf, 0xf}, //end sign
};
//effective values
const uint32_t stm32f316re_val_i2c3[REG_NUM][NUM_EFF_VAL] = {

    {   //0x00
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
        0x00000010, 0x00000020, 0x00000040, 0x00000080,
        0x00000f00, 
		0x00001000, 0x00004000, 0x00008000,
		0x00010000, 0x00020000, 0x00040000, 0x00080000,
		0x00100000, 0x00200000, 0x00400000, 0x00800000
    },{ //0x04
		0x000003ff, 0x00000400, 0x00000800,
		0x00001000, 0x00002000, 0x00004000, 0x00008000,
		0x00ff0000, 
		0x01000000, 0x02000000, 0x04000000
    },{ //0x08
		0x000003ff, 0x00000400
    },{ //0x0c
		0x000000fe,
		0x00000700,
		0x00008000
    },{ //0x10
		0x000000ff, 0x0000ff00, 0x000f0000, 0x00f00000,
		0xf0000000
    },{ //0x14
		0x00000fff, 
		0x00001000, 0x00008000,
		0x0fff0000, 0x80000000
    },{ //0x18
		0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00001000, 0x00002000, 0x00008000,
		0x00010000, 0x00fe0000
    },{ //0x1c
		0x00000008,
		0x00000010, 0x000000020,
		0x00000100, 0x000000200, 0x00000400, 0x00000800,
		0x00001000, 0x000002000
    },{ //0x20
		0x000000ff
    },{ //0x24
		0x000000ff
    },{ //0x28
        0x0000ffff
    },{ //end-sign
		0xffffffff, 0xffffffff
    }
};


/******************** SYSCFS+COMP+OPAMP *********************/
/*
 * They use different mmio registers within this region
 */
//register information
#define stm32f316re_base_syscfs 0x40010000
#define stm32f316re_size_syscfs KB
const uint32_t stm32f316re_info_syscfs[REG_NUM][NUM_BASIC_INFO] = {

	//SYSCFS
    {0x7c000000, 1, 1, 1}, //0x00
    {0x00000000, 1, 1, 1}, //0x04
    {0x00000000, 1, 1, 1}, //0x08
    {0x00000000, 1, 1, 1}, //0x0c
    {0x00000000, 2, 1, 1}, //0x10
    {0x00000000, 1, 1, 1}, //0x14
    {0x00000000, 1, 1, 1}, //0x18
    {0x00000000, 4, 1, 1}, //0x1c
    {0x00000000, 4, 1, 1}, //0x20
    {0x00000000, 4, 1, 1}, //0x24
    {0x00000000, 4, 1, 1}, //0x28
    {0x00000000, 4, 1, 1}, //0x2c
    {0x00000000, 4, 1, 1}, //0x30
    {0x00000000, 4, 1, 1}, //0x34
    {0x00000000, 1, 1, 1}, //0x38
    {0x00000000, 1, 1, 1}, //0x3c
    {0x00000000, 1, 1, 1}, //0x40
    {0x00000000, 1, 1, 1}, //0x44
    {0x00000000, 1, 1, 1}, //0x48
	{0x00000000, 9, 1, 1}, //0x4c
    {0x00000200, 1, 1, 1}, //0x50
    {0x00000000, 9, 0xf, 0xf}, //end sign
};
//effective values
const uint32_t stm32f316re_val_syscfs[REG_NUM][NUM_EFF_VAL] = {

	//SYSCFS
    {   //0x00
		0x00000003, 
		0x00000020, 0x00000040, 0x00000080,
		0x00000100, 0x00000800,
		0x00001000, 0x00002000, 0x00004000, 0x00008000,
		0x00010000, 0x00020000, 0x00040000, 0x00080000,
		0x00100000, 0x00200000, 0x00c00000,
		0xfc000000
    },{ //0x04
		0x0000ffff
    },{ //0x08
		0x0000000f, 0x000000f0, 0x0000f000, 0x0000f000
    },{ //0x0c
		0x0000000f, 0x000000f0, 0x0000f000, 0x0000f000
    },{ //0x10
		0x0000000f, 0x000000f0, 0x0000f000, 0x0000f000
    },{ //0x14
		0x0000000f, 0x000000f0, 0x0000f000, 0x0000f000
    },{ //0x18
		0x00000001, 0x00000002, 0x00000004, 
		0x00000010,
		0x00000100
    },{ //0x1c
		0x00000001, 0x00000002, 0x0000000c,
		0x00000070, 
		0x00003c00, 0x00008000,
		0x00030000, 0x001c0000,
		0x40000000, 0x80000000
	},{ //0x20
        0x00000001, 0x00000002, 0x0000000c,
        0x00000070, 0x00000080,
        0x00000200, 
		0x00003c00, 0x00008000,
		0x001c0000,
		0x02000000, 0x04000000,
		0x40000000, 0x80000000
    },{ //0x24
		0x00000001, 0x0000000c,
		0x00000070, 0x00000080,
		0x00003c00, 0x00008000,
		0x00030000, 0x001c0000,
		0x40000000, 0x80000000
    },{ //0x28
        0x00000001, 0x00000002, 0x0000000c,
        0x00000070, 0x00000080,
        0x00000200, 
		0x00003c00, 0x00008000,
		0x001c0000,
		0x02000000, 0x04000000,
		0x40000000, 0x80000000
    },{ //0x2c
		0x00000001, 0x0000000c,
		0x00000070, 0x00000080,
		0x00003c00, 0x00008000,
		0x00030000, 0x001c0000,
		0x40000000, 0x80000000
    },{ //0x30
        0x00000001, 0x00000002, 0x0000000c,
        0x00000070, 0x00000080,
        0x00000200, 
		0x00003c00, 0x00008000,
		0x001c0000,
		0x02000000, 0x04000000,
		0x40000000, 0x80000000
    },{ //0x34
		0x00000001, 0x0000000c,
		0x00000070, 0x00000080,
		0x00003c00, 0x00008000,
		0x00030000, 0x001c0000,
		0x40000000, 0x80000000
    },{ //0x38
		0x00000001, 0x00000020, 0x0000000c,
		0x00000060, 0x00000080,
		0x00000100, 0x00000600, 0x00000800,
		0x00003000,
		0x0003c000, 0x00040000,
		0x00f80000, 
		0x1f000000, 0x20000000, 0x40000000, 0x80000000
    },{ //0x3c
		0x00000001, 0x00000020, 0x0000000c,
		0x00000060, 0x00000080,
		0x00000100, 0x00000600, 0x00000800,
		0x00003000,
		0x0003c000, 0x00040000,
		0x00f80000, 
		0x1f000000, 0x20000000, 0x40000000, 0x80000000
    },{ //0x40
		0x00000001, 0x00000020, 0x0000000c,
		0x00000060, 0x00000080,
		0x00000100, 0x00000600, 0x00000800,
		0x00003000,
		0x0003c000, 0x00040000,
		0x00f80000, 
		0x1f000000, 0x20000000, 0x40000000, 0x80000000
    },{ //0x44
		0x00000001, 0x00000020, 0x0000000c,
		0x00000060, 0x00000080,
		0x00000100, 0x00000600, 0x00000800,
		0x00003000,
		0x0003c000, 0x00040000,
		0x00f80000, 
		0x1f000000, 0x20000000, 0x40000000, 0x80000000
	},{ //0x48
		0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00001000, 0x00002000
	},{ //0x4c
	},{ //0x50
		0x00000003, 0x0000000c,
		0x00000030, 0x000000c0,
		0x00000300
    },{ //end-sign
		0xffffffff, 0xffffffff
    }
};

 
/******************** EXTI *********************/
//register information
#define stm32f316re_base_exti 0x40010400
#define stm32f316re_size_exti KB
const uint32_t stm32f316re_info_exti[REG_NUM][NUM_BASIC_INFO] = {

    {0x1f800000, 1, 1, 1}, //0x00
    {0x00000000, 1, 1, 1}, //0x04
    {0x00000000, 1, 1, 1}, //0x08
    {0x00000000, 1, 1, 1}, //0x0c
    {0x00000000, 1, 1, 1}, //0x10
    {0x00000000, 1, 1, 1}, //0x14
    {0x00000000, 9, 1, 1}, //0x18
    {0x00000000, 9, 1, 1}, //0x1c
    {0x00000000, 1, 1, 1}, //0x20
    {0x00000000, 1, 1, 1}, //0x24
    {0x00000000, 1, 1, 1}, //0x28
    {0x00000000, 1, 1, 1}, //0x2c
    {0x00000000, 9, 1, 1}, //0x30
    {0x00000000, 1, 1, 1}, //0x34
    {0x00000000, 9, 0xf, 0xf}, //end sign
};
//effective values
const uint32_t stm32f316re_val_exti[REG_NUM][NUM_EFF_VAL] = {

    {   //0x00
		0xffffffff
    },{ //0x04
		0xffffffff
    },{ //0x08
		0x003fffff, 0xe0000000
    },{ //0x0c
		0x003fffff, 0xe0000000
    },{ //0x10
		0x003fffff, 0xe0000000
    },{ //0x14
		0x003fffff, 0xe0000000
    },{ //0x18
    },{ //0x1c
    },{ //0x20
        0x00000001, 0x00000002, 0x00000004, 0x00000008
    },{ //0x24
        0x00000001, 0x00000002, 0x00000004, 0x00000008
    },{ //0x28
        0x00000001, 0x00000002
    },{ //0x2c
        0x00000001, 0x00000002
    },{ //0x30
        0x00000001, 0x00000002
    },{ //0x34
        0x00000001, 0x00000002
    },{ // end-sign
		0xffffffff, 0xffffffff
    }
};


/******************** TIM1 *********************/
//register information
#define stm32f316re_base_tim1 0x40012c00
#define stm32f316re_size_tim1 KB
const uint32_t stm32f316re_info_tim1[REG_NUM][NUM_BASIC_INFO] = {

    {0x00000000, 1, 1, 1}, //0x00
    {0x00000000, 1, 1, 1}, //0x04
    {0x00000000, 1, 1, 1}, //0x08
    {0x00000000, 1, 1, 1}, //0x0c
    {0x00000000, 2, 1, 1}, //0x10
    {0x00000000, 1, 1, 1}, //0x14
    {0x00000000, 1, 1, 1}, //0x18
    {0x00000000, 1, 1, 1}, //0x1c
    {0x00000000, 1, 1, 1}, //0x20
    {0x00000000, 3, 1, 1}, //0x24
    {0x00000000, 3, 1, 1}, //0x28
    {0x0000ffff, 3, 1, 1}, //0x2c
    {0x00000000, 3, 1, 1}, //0x30
    {0x00000000, 3, 1, 1}, //0x34
    {0x00000000, 3, 1, 1}, //0x38
    {0x00000000, 3, 1, 1}, //0x3c
    {0x00000000, 3, 1, 1}, //0x40
    {0x00000000, 1, 1, 1}, //0x44
    {0x00000000, 1, 1, 1}, //0x48
    {0x00000000, 3, 1, 1}, //0x4c
    {0x00000000, 1, 1, 1}, //0x50
    {0x00000000, 3, 1, 1}, //0x54
    {0x00000000, 3, 1, 1}, //0x58
    {0x00000000, 3, 1, 1}, //0x5c
    {0x00000000, 9, 0xf, 0xf}, //end sign
};
//effective values
const uint32_t stm32f316re_val_tim1[REG_NUM][NUM_EFF_VAL] = {

    {   //0x00
		0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000060, 0x00000080,
		0x00000300, 0x00000800
    },{ //0x04
		0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000070, 0x00000080,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00001000, 0x00002000, 0x00004000,
		0x00010000, 0x00040000,
		0x00f00000
    },{ //0x08
		0x00000007, 0x00000008,
		0x00000070, 0x00000080, 
		0x00000f00,
		0x00003000, 0x00004000, 0x00008000,
		0x00010000
    },{ //0x0c
		0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00001000, 0x00002000, 0x00004000
    },{ //0x10
		0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00001000,
		0x00010000, 0x00020000
    },{ //0x14
		0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000100
    },{ //0x18
		0x00000003, 0x0000000c,
		0x000000f0,
		0x00000300, 0x00000c00,
		0x0000f000
    },{ //0x1c
		0x00000003, 0x0000000c,
		0x000000f0, 
		0x00000300, 0x00000c00,
		0x0000f000
    },{ //0x20
		0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00001000, 0x00002000,
		0x00010000, 0x00020000,
		0x00100000, 0x00200000
    },{ //0x24
		0x0000ffff,
		0x10000000
    },{ //0x28
		0x0000ffff
    },{ //0x2c
		0x0000ffff
    },{ //0x30
		0x0000ffff
    },{ //0x34
		0x0000ffff
    },{ //0x38
		0x0000ffff
    },{ //0x3c
		0x0000ffff
    },{ //0x40
		0x0000ffff
 	}, { //0x44
		0x000000ff,
		0x00000300, 0x00000400, 0x00000800,
		0x00001000, 0x00002000, 0x00004000, 0x00008000,
		0x000f0000, 
		0x00f00000,
		0x01000000, 0x02000000
    },{ //0x48
		0x0000001f, 
		0x00001f00
    },{ //0x4c
		0xffffffff
	},{ //0x50
		0x00000003, 0x0000000c
	},{ //0x54
		0x00000004, 0x00000008,
		0x00000070, 0x00000080,
		0x00000400, 0x00000800,
		0x00007000, 0x00008000,
		0x00010000, 
		0x01000000
	},{ //0x58
		0x0000ffff,
		0x20000000, 0x40000000, 0x80000000
	}, { //0x5c
		0x0000ffff
    },{ // end-sign
		0xffffffff, 0xffffffff
    }
};


/******************** SPI1 *********************/
//register information
#define stm32f316re_base_spi1 0x40013000
#define stm32f316re_size_spi1 KB
const uint32_t stm32f316re_info_spi1[REG_NUM][NUM_BASIC_INFO] = {

    {0x00000000, 1, 1, 1}, //0x00
    {0x00000700, 1, 1, 1}, //0x04
    {0x00000002, 2, 1, 1}, //0x08
    {0x00000000, 3, 1, 1}, //0x0c
    {0x00000007, 3, 1, 1}, //0x10
    {0x00000000, 3, 1, 1}, //0x14
    {0x00000000, 3, 1, 1}, //0x18
    {0x00000000, 1, 1, 1}, //0x1c
    {0x00000010, 1, 1, 1}, //0x20
    {0x00000000, 9, 0xf, 0xf}, //end sign
};
//effective values
const uint32_t stm32f316re_val_spi1[REG_NUM][NUM_EFF_VAL] = {

    {   //0x00
        0x00000001, 0x00000002, 0x00000004,
		0x0000003f, 0x00000040, 0x00000080,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00001000, 0x00002000, 0x00004000, 0x00008000
    },{ //0x04
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000f00,
		0x00001000, 0x00002000, 0x00004000
    },{ //0x08
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000100, 0x00000600,
		0x00001800
    },{ //0x0c
		0x0000ffff
    },{ //0x10
		0x0000ffff
    },{ //0x14
		0x0000ffff
    },{ //0x18
		0x0000ffff
    },{ //0x1c
        0x00000001, 0x00000006, 0x00000008,
		0x00000030, 0x00000080,
		0x00000300, 0x00000400, 0x00000800
    },{ //0x20
		0x000000ff,
		0x00000100, 0x00000200
    },{ //end-sign
		0xffffffff, 0xffffffff
    }
};


/******************** TIM8 *********************/
//register information
#define stm32f316re_base_tim8 0x40013400
#define stm32f316re_size_tim8 KB
const uint32_t stm32f316re_info_tim8[REG_NUM][NUM_BASIC_INFO] = {

    {0x00000000, 1, 1, 1}, //0x00
    {0x00000000, 1, 1, 1}, //0x04
    {0x00000000, 1, 1, 1}, //0x08
    {0x00000000, 1, 1, 1}, //0x0c
    {0x00000000, 2, 1, 1}, //0x10
    {0x00000000, 1, 1, 1}, //0x14
    {0x00000000, 1, 1, 1}, //0x18
    {0x00000000, 1, 1, 1}, //0x1c
    {0x00000000, 1, 1, 1}, //0x20
    {0x00000000, 3, 1, 1}, //0x24
    {0x00000000, 3, 1, 1}, //0x28
    {0x0000ffff, 3, 1, 1}, //0x2c
    {0x00000000, 3, 1, 1}, //0x30
    {0x00000000, 3, 1, 1}, //0x34
    {0x00000000, 3, 1, 1}, //0x38
    {0x00000000, 3, 1, 1}, //0x3c
    {0x00000000, 3, 1, 1}, //0x40
    {0x00000000, 1, 1, 1}, //0x44
    {0x00000000, 1, 1, 1}, //0x48
    {0x00000000, 3, 1, 1}, //0x4c
    {0x00000000, 1, 1, 1}, //0x50
    {0x00000000, 3, 1, 1}, //0x54
    {0x00000000, 3, 1, 1}, //0x58
    {0x00000000, 3, 1, 1}, //0x5c
    {0x00000000, 9, 0xf, 0xf}, //end sign
};
//effective values
const uint32_t stm32f316re_val_tim8[REG_NUM][NUM_EFF_VAL] = {

    {   //0x00
		0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000060, 0x00000080,
		0x00000300, 0x00000800
    },{ //0x04
		0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000070, 0x00000080,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00001000, 0x00002000, 0x00004000,
		0x00010000, 0x00040000,
		0x00f00000
    },{ //0x08
		0x00000007, 0x00000008,
		0x00000070, 0x00000080, 
		0x00000f00,
		0x00003000, 0x00004000, 0x00008000,
		0x00010000
    },{ //0x0c
		0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00001000, 0x00002000, 0x00004000
    },{ //0x10
		0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00001000,
		0x00010000, 0x00020000
    },{ //0x14
		0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000100
    },{ //0x18
		0x00000003, 0x0000000c,
		0x000000f0,
		0x00000300, 0x00000c00,
		0x0000f000
    },{ //0x1c
		0x00000003, 0x0000000c,
		0x000000f0, 
		0x00000300, 0x00000c00,
		0x0000f000
    },{ //0x20
		0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00001000, 0x00002000,
		0x00010000, 0x00020000,
		0x00100000, 0x00200000
    },{ //0x24
		0x0000ffff,
		0x10000000
    },{ //0x28
		0x0000ffff
    },{ //0x2c
		0x0000ffff
    },{ //0x30
		0x0000ffff
    },{ //0x34
		0x0000ffff
    },{ //0x38
		0x0000ffff
    },{ //0x3c
		0x0000ffff
    },{ //0x40
		0x0000ffff
 	}, { //0x44
		0x000000ff,
		0x00000300, 0x00000400, 0x00000800,
		0x00001000, 0x00002000, 0x00004000, 0x00008000,
		0x000f0000, 
		0x00f00000,
		0x01000000, 0x02000000
    },{ //0x48
		0x0000001f, 
		0x00001f00
    },{ //0x4c
		0xffffffff
	},{ //0x50
		0x00000003, 0x0000000c
	},{ //0x54
		0x00000004, 0x00000008,
		0x00000070, 0x00000080,
		0x00000400, 0x00000800,
		0x00007000, 0x00008000,
		0x00010000, 
		0x01000000
	},{ //0x58
		0x0000ffff,
		0x20000000, 0x40000000, 0x80000000
	}, { //0x5c
		0x0000ffff
    },{ // end-sign
		0xffffffff, 0xffffffff
    }
};


/******************** USART1 *********************/
//register information
#define stm32f316re_base_usart1 0x40013800
#define stm32f316re_size_usart1 KB
const uint32_t stm32f316re_info_usart1[REG_NUM][NUM_BASIC_INFO] = {

    {0x00000000, 1, 1, 1}, //0x00
    {0x00000000, 1, 1, 1}, //0x04
    {0x00000000, 1, 1, 1}, //0x08
    {0x00000000, 3, 1, 1}, //0x0c
    {0x00000000, 3, 1, 1}, //0x10
    {0x00000000, 3, 1, 1}, //0x14
    {0x00000000, 1, 1, 1}, //0x18
    {0x02000000, 1, 1, 1}, //0x1c
    {0x00000000, 1, 1, 1}, //0x20
    {0x00000000, 3, 1, 1}, //0x24
    {0x00000000, 3, 1, 1}, //0x28
    {0x00000000, 9, 0xf, 0xf}, //end sign
};
//effective values
const uint32_t stm32f316re_val_usart1[REG_NUM][NUM_EFF_VAL] = {

    {   //0x00
        0x00000001, 0x00000004, 0x00000008,
        0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00001000, 0x00002000, 0x00004000, 0x00008000,
		0x00010000, 0x00020000, 0x00040000, 0x00080000,
		0x00100000, 0x00200000, 0x00400000, 0x00800000,
		0x01000000, 0x02000000, 0x04000000, 0x08000000,
		0x10000000
    },{ //0x04
		0x00000010, 0x00000020, 0x00000040,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00003000, 0x00004000, 0x00008000,
		0x00010000, 0x00020000, 0x00040000, 0x00080000,
		0x00100000, 0x00200000, 0x00400000, 0x00800000,
		0x0f000000,
		0xf0000000
    },{ //0x08
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
        0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00001000, 0x00002000, 0x00004000, 0x00008000,
		0x000e0000,
		0x00300000, 0x00400000
    },{ //0x0c
		0x0000ffff
    },{ //0x10
		0x000000ff, 0x0000ff00
    },{ //0x14
		0x00ffffff, 0xff000000
    },{ //0x18
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
        0x00000010, 
    },{ //0x1c
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
        0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00002000, 0x00004000, 0x00008000,
		0x00010000, 0x00020000, 0x00040000, 0x00080000,
		0x00100000, 0x00200000, 0x00400000
    },{ //0x20
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
        0x00000010, 0x00000040,
        0x00000100, 0x00000200, 0x00000800,
        0x00001000,
		0x00020000,
		0x00100000
    },{ //0x24
        0x000000ff
    },{ //0x28
        0x000000ff
    },{ //end-sign
		0xffffffff, 0xffffffff
    }
};


/******************** SPI4 *********************/
//register information
#define stm32f316re_base_spi4 0x40013c00
#define stm32f316re_size_spi4 KB
const uint32_t stm32f316re_info_spi4[REG_NUM][NUM_BASIC_INFO] = {

    {0x00000000, 1, 1, 1}, //0x00
    {0x00000700, 1, 1, 1}, //0x04
    {0x00000002, 2, 1, 1}, //0x08
    {0x00000000, 3, 1, 1}, //0x0c
    {0x00000007, 3, 1, 1}, //0x10
    {0x00000000, 3, 1, 1}, //0x14
    {0x00000000, 3, 1, 1}, //0x18
    {0x00000000, 1, 1, 1}, //0x1c
    {0x00000010, 1, 1, 1}, //0x20
    {0x00000000, 9, 0xf, 0xf}, //end sign
};
//effective values
const uint32_t stm32f316re_val_spi4[REG_NUM][NUM_EFF_VAL] = {

    {   //0x00
        0x00000001, 0x00000002, 0x00000004,
		0x0000003f, 0x00000040, 0x00000080,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00001000, 0x00002000, 0x00004000, 0x00008000
    },{ //0x04
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000f00,
		0x00001000, 0x00002000, 0x00004000
    },{ //0x08
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000100, 0x00000600,
		0x00001800
    },{ //0x0c
		0x0000ffff
    },{ //0x10
		0x0000ffff
    },{ //0x14
		0x0000ffff
    },{ //0x18
		0x0000ffff
    },{ //0x1c
        0x00000001, 0x00000006, 0x00000008,
		0x00000030, 0x00000080,
		0x00000300, 0x00000400, 0x00000800
    },{ //0x20
		0x000000ff,
		0x00000100, 0x00000200
    },{ //end-sign
		0xffffffff, 0xffffffff
    }
};


/******************** TIM15 *********************/
//register information
#define stm32f316re_base_tim15 0x40014000
#define stm32f316re_size_tim15 KB
const uint32_t stm32f316re_info_tim15[REG_NUM][NUM_BASIC_INFO] = {

    {0x00000000, 1, 1, 1}, //0x00
    {0x00000000, 1, 1, 1}, //0x04
    {0x00000000, 1, 1, 1}, //0x08
    {0x00000000, 1, 1, 1}, //0x0c
    {0x00000000, 2, 1, 1}, //0x10
    {0x00000000, 1, 1, 1}, //0x14
    {0x00000000, 1, 1, 1}, //0x18
    {0x00000000, 1, 1, 1}, //0x1c
    {0x00000000, 1, 1, 1}, //0x20
    {0x00000000, 3, 1, 1}, //0x24
    {0x00000000, 3, 1, 1}, //0x28
    {0x0000ffff, 3, 1, 1}, //0x2c
    {0x00000000, 3, 1, 1}, //0x30
    {0x00000000, 1, 1, 1}, //0x34
    {0x00000000, 1, 1, 1}, //0x38
    {0x00000000, 9, 1, 1}, //0x3c
    {0x00000000, 9, 1, 1}, //0x40
    {0x00000000, 1, 1, 1}, //0x44
    {0x00000000, 1, 1, 1}, //0x48
    {0x00000000, 3, 1, 1}, //0x4c
    {0x00000000, 9, 0xf, 0xf} //end sign
};
//effective values
const uint32_t stm32f316re_val_tim15[REG_NUM][NUM_EFF_VAL] = {

    {   //0x00
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
        0x00000080,
        0x00000300, 0x00000800
    },{ //0x04
        0x00000001, 0x00000004, 0x00000008,
        0x00000070, 0x00000080,
		0x00000100, 0x00000200, 0x00000400
    },{ //0x08
        0x00000007,
        0x00000070, 0x00000080,
        0x00010000
    },{ //0x0c
        0x00000001, 0x00000002, 0x00000004,
        0x00000020, 0x00000040, 0x00000080,
        0x00000100, 0x00000200, 0x00000400,
        0x00001000, 0x00002000, 0x00004000,
		0x00010000, 0x00020000, 0x00040000
    },{ //0x10
        0x00000001, 0x00000002, 0x00000004,
        0x00000020, 0x00000040, 0x00000080,
        0x00000200, 0x00000400
    },{ //0x14
        0x00000001, 0x00000002, 0x00000004,
        0x00000020, 0x00000040, 0x00000080,
    },{ //0x18
        0x00000003, 0x0000000c,
        0x000000f0,
        0x00000300, 0x00000c00,
        0x0000f000
    },{ //0x1c
        0x00000003, 0x0000000c,
        0x000000f0,
        0x00000300, 0x00000c00,
        0x0000f000
    },{ //0x20
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
        0x00000010, 0x00000020, 0x00000080,
    },{ //0x24
        0x0000ffff, 0xf0000000
    },{ //0x28
        0x0000ffff
    },{ //0x2c
        0x0000ffff, 0xffff0000
    },{ //0x30
		0x000000ff
    },{ //0x34
        0x0000ffff,
    },{ //0x38
        0x0000ffff,
    },{ //0x3c
    },{ //0x40
    },{ //0x44
		0x000000ff,
		0x00000300, 0x00000400, 0x00000800,
		0x00001000, 0x00002000, 0x00004000,
    },{ //0x48
        0x0000001f, 0x00001f00
    },{ //0x4c
		0x0000ffff
    },{ //end-sign
		0xffffffff, 0xffffffff
	}
};


/******************** TIM16/17/20 *********************/
//register information
#define stm32f316re_base_tim16 0x40014400
#define stm32f316re_base_tim17 0x40014800
#define stm32f316re_base_tim20 0x40015000
#define stm32f316re_size_tim16 KB 
#define stm32f316re_size_tim17 KB 
#define stm32f316re_size_tim20 KB 
const uint32_t stm32f316re_info_tim16[REG_NUM][NUM_BASIC_INFO] = {

    {0x00000000, 1, 1, 1}, //0x00
    {0x00000000, 1, 1, 1}, //0x04
    {0x00000000, 9, 1, 1}, //0x08
    {0x00000000, 1, 1, 1}, //0x0c
    {0x00000000, 2, 1, 1}, //0x10
    {0x00000000, 1, 1, 1}, //0x14
    {0x00000000, 1, 1, 1}, //0x18
    {0x00000000, 1, 1, 1}, //0x1c
    {0x00000000, 1, 1, 1}, //0x20
    {0x00000000, 3, 1, 1}, //0x24
    {0x00000000, 3, 1, 1}, //0x28
    {0x0000ffff, 3, 1, 1}, //0x2c
    {0x00000000, 3, 1, 1}, //0x30
    {0x00000000, 1, 1, 1}, //0x34
    {0x00000000, 9, 1, 1}, //0x38
    {0x00000000, 9, 1, 1}, //0x3c
    {0x00000000, 9, 1, 1}, //0x40
    {0x00000000, 1, 1, 1}, //0x44
    {0x00000000, 1, 1, 1}, //0x48
    {0x00000000, 3, 1, 1}, //0x4c
    {0x00000000, 1, 1, 1}, //0x50
    {0x00000000, 9, 0xf, 0xf}, //end sign
};
//effective values
const uint32_t stm32f316re_val_tim16[REG_NUM][NUM_EFF_VAL] = {

    {   //0x00
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
        0x00000080,
		0x00000100, 0x00000200
    },{ //0x04
        0x00000001, 0x00000004, 0x00000008,
        0x00000100, 0x00000200
    },{ //0x08
    },{ //0x0c
        0x00000001, 0x00000002,
        0x00000020, 0x00000080,
        0x00000100, 0x00000200,
       	0x00002000
    },{ //0x10
        0x00000001, 0x00000002,
        0x00000020, 0x00000080, 
        0x00000200, 
    },{ //0x14
        0x00000001, 0x00000002,
        0x00000020, 0x00000080, 
    },{ //0x18
        0x00000003, 0x0000000c,
        0x000000f0,
    },{ //0x1c
    },{ //0x20
        0x00000001, 0x00000002, 0x00000004, 0x00000008
    },{ //0x24
        0x0000ffff, 0xf0000000
    },{ //0x28
        0x0000ffff
    },{ //0x2c
        0x0000ffff
    },{ //0x30
		0x000000ff
    },{ //0x34
        0x0000ffff
    },{ //0x38
    },{ //0x3c
    },{ //0x40
    },{ //0x44
		0x000000ff,
		0x00003000, 0x00004000, 0x00008000,
		0x00010000, 0x00020000, 0x00040000, 0x00080000
    },{ //0x48
        0x0000001f, 0x00001f00
    },{ //0x4c
		0x0000ffff
    },{ //0x50
		0x00000003
	},{ //end-sign
		0xffffffff, 0xffffffff
	}
};


/******************** DMA1/2 *********************/
//register information
#define stm32f316re_base_dma1 0x40020000
#define stm32f316re_base_dma2 0x40020400
#define stm32f316re_size_dma1 0x40020000
#define stm32f316re_size_dma2 0x40020400
const uint32_t stm32f316re_info_dma[REG_NUM][NUM_BASIC_INFO] = {

    {0x00000000, 2, 1, 1}, //0x00
    {0x00000000, 1, 1, 1}, //0x04
    {0x00000000, 1, 1, 1}, //0x08
    {0x00000000, 3, 1, 1}, //0x0c
    {0x00000000, 3, 1, 1}, //0x10
    {0x00000000, 3, 1, 1}, //0x14
    {0x00000000, 9, 1, 1}, //0x18
    {0x00000000, 1, 1, 1}, //0x1c
    {0x00000000, 3, 1, 1}, //0x20
    {0x00000000, 3, 1, 1}, //0x24
    {0x00000000, 3, 1, 1}, //0x28
    {0x00000000, 9, 1, 1}, //0x2c
    {0x00000000, 1, 1, 1}, //0x30
    {0x00000000, 3, 1, 1}, //0x34
    {0x00000000, 3, 1, 1}, //0x38
    {0x00000000, 3, 1, 1}, //0x3c
    {0x00000000, 3, 1, 1}, //0x40
    {0x00000000, 1, 1, 1}, //0x44
    {0x00000000, 3, 1, 1}, //0x48
    {0x00000000, 3, 1, 1}, //0x4c
    {0x00000000, 3, 1, 1}, //0x50
    {0x00000000, 3, 1, 1}, //0x54
    {0x00000000, 1, 1, 1}, //0x58
    {0x00000000, 3, 1, 1}, //0x5c
    {0x00000000, 3, 1, 1}, //0x60
    {0x00000000, 3, 1, 1}, //0x64
    {0x00000000, 3, 1, 1}, //0x68
    {0x00000000, 1, 1, 1}, //0x6c
    {0x00000000, 3, 1, 1}, //0x70
    {0x00000000, 3, 1, 1}, //0x74
    {0x00000000, 3, 1, 1}, //0x78
    {0x00000000, 3, 1, 1}, //0x7c
    {0x00000000, 1, 1, 1}, //0x80
    {0x00000000, 3, 1, 1}, //0x84
    {0x00000000, 3, 1, 1}, //0x88
    {0x00000000, 3, 1, 1}, //0x8c
    {0x00000000, 9, 0xf, 0xf}, //end sign
};
//effective values
const uint32_t stm32f316re_val_dma[REG_NUM][NUM_EFF_VAL] = {

    {   //0x00
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00001000, 0x00002000, 0x00004000, 0x00008000,
		0x00010000, 0x00020000, 0x00040000, 0x00080000,
		0x00100000, 0x00200000, 0x00400000, 0x00800000,
		0x01000000, 0x02000000, 0x04000000, 0x08000000,
    },{ //0x04
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00001000, 0x00002000, 0x00004000, 0x00008000,
		0x00010000, 0x00020000, 0x00040000, 0x00080000,
		0x00100000, 0x00200000, 0x00400000, 0x00800000,
		0x01000000, 0x02000000, 0x04000000, 0x08000000,
    },{ //0x08
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000300, 0x00000c00,
		0x00003000, 0x00004000
    },{ //0x0c
		0x0000ffff
    },{ //0x10
		0xffffffff
    },{ //0x14
		0xffffffff
    },{ //0x18
    },{ //0x1c
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000300, 0x00000c00,
		0x00003000, 0x00004000
    },{ //0x20
		0x0000ffff
    },{ //0x24
		0xffffffff
    },{ //0x28
		0xffffffff
    },{ //0x2c
    },{ //0x30
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000300, 0x00000c00,
		0x00003000, 0x00004000
    },{ //0x34
		0x0000ffff
    },{ //0x38
		0xffffffff
    },{ //0x3c
		0xffffffff
    },{ //0x40
    },{ //0x44
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000300, 0x00000c00,
		0x00003000, 0x00004000
    },{ //0x48
		0x0000ffff
    },{ //0x4c
		0xffffffff
    },{ //0x50
		0xffffffff
    },{ //0x54
    },{ //0x58
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000300, 0x00000c00,
		0x00003000, 0x00004000
    },{ //0x5c
		0x0000ffff
    },{ //0x60
		0xffffffff
    },{ //0x64
		0xffffffff
    },{ //0x68
    },{ //0x6c
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000300, 0x00000c00,
		0x00003000, 0x00004000
    },{ //0x70
		0x0000ffff
    },{ //0x74
		0xffffffff
    },{ //0x78
		0xffffffff
    },{ //0x7c
    },{ //0x80
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000300, 0x00000c00,
		0x00003000, 0x00004000
    },{ //0x84
		0x0000ffff
    },{ //0x88
		0xffffffff
    },{ //0x8c
		0xffffffff
    },{ //end-sign
		0xffffffff, 0xffffffff
    }
};


/******************** RCC *********************/
//register information
#define stm32f316re_base_rcc 0x40021000
#define stm32f316re_size_rcc KB
const uint32_t stm32f316re_info_rcc[REG_NUM][NUM_BASIC_INFO] = {

    {0x00000000, 1, 1, 1}, //0x00
    {0x00000000, 1, 1, 1}, //0x04
    {0x00000000, 1, 1, 1}, //0x08
    {0x00000000, 1, 1, 1}, //0x0c
    {0x00000000, 1, 1, 1}, //0x10
    {0x00000014, 1, 1, 1}, //0x14
    {0x00000000, 1, 1, 1}, //0x18
    {0x00000000, 1, 1, 1}, //0x1c
    {0x00000018, 1, 1, 1}, //0x20
    {0x0c000000, 4, 1, 1}, //0x24
    {0x00000000, 1, 1, 1}, //0x28
    {0x00000000, 1, 1, 1}, //0x2c
    {0x00000000, 9, 1, 1}, //0x30
    {0x00000000, 9, 0xf, 0xf}, //end sign
};
//effective values
const uint32_t stm32f316re_val_rcc[REG_NUM][NUM_EFF_VAL] = {

    {   //0x00
        0x00000001, 0x00000002, 
		0x000000f8,
		0x0000ff00,
		0x00010000, 0x00020000, 0x00040000, 0x00080000,
		0x01000000, 0x02000000
    },{ //0x04
		0x00000003, 0x0000000c,
		0x000000f0,
		0x00000700,
		0x00003800, 0x00008000,
		0x00010000, 0x00020000,
		0x00380000, 0x00400000, 0x00800000,
		0x07000000,
		0x10000000, 0x60000000, 0x80000000
    },{ //0x08
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000080,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00001000, 
		0x00010000, 0x00020000, 0x00040000, 0x00080000,
		0x00100000, 0x00800000
    },{ //0x0c
		0x00000001, 0x00000800,
		0x00001000, 0x00002000, 0x00004000, 0x00008000,
		0x00010000, 0x00020000
    },{ //0x10
        0x00000001, 0x00000002, 0x00000004, 
        0x00000010, 0x00000020, 
        0x00000800,
        0x00004000, 0x00008000,
		0x00020000, 0x00040000, 0x00080000,
		0x00100000, 0x00200000, 0x00400000, 0x00080000,
		0x02000000, 0x04000000,
		0x20000000, 0x40000000, 0x80000000
    },{ //0x14
        0x00000001, 0x00000002, 0x00000004, 
        0x00000010, 0x00000020, 0x00000040,
		0x00010000, 0x00020000, 0x00040000, 0x00080000,
		0x00100000, 0x00200000, 0x00400000, 0x00800000,
		0x01000000,
		0x10000000, 0x20000000
    },{ //0x18
		0x00000001,
		0x00000800,
		0x00001000, 0x00002000, 0x00004000, 0x00008000,
		0x00010000, 0x00020000, 0x00040000,
		0x00100000
    },{ //0x1c
		0x00000001, 0x00000002, 0x00000004,
		0x00000010, 0x00000020,
		0x00000800,
		0x00004000, 0x00008000,
		0x00020000, 0x00040000, 0x00080000,
		0x00100000, 0x00200000, 0x00400000, 0x00800000,
		0x02000000, 0x04000000,
		0x10000000, 0x20000000, 0x40000000
    },{ //0x20
        0x00000001, 0x00000002, 0x00000004,
        0x00000018,
        0x00000300,
        0x00008000,
		0x00010000
    },{ //0x24
		0x00000001, 0x00000002,
		0x00800000,
		0x01000000, 0x02000000, 0x04000000, 0x08000000,
		0x10000000, 0x20000000, 0x40000000, 0x80000000
    },{ //0x28
		0x00000020, 
		0x00010000, 0x00020000, 0x00040000, 0x00080000,
		0x00100000, 0x00200000, 0x00400000, 0x00800000,
		0x01000000,
		0x10000000, 0x20000000
    },{ //0x2c
		0x0000000f, 
		0x000001f0,
		0x00003e00
    },{ //0x30
		0x00000003,
		0x00000010, 0x00000020, 0x00000400, 
		0x00000100, 0x00000200,
		0x00008000,
		0x00030000, 0x000c0000,
		0x00300000, 0x00c00000,
		0x01000000, 0x02000000
    },{ //end-sign
		0xffffffff, 0xffffffff
    }
};


/******************** Flash interface *********************/
//register information
#define stm32f316re_base_flashint 0x40022000
#define stm32f316re_size_flashint KB
const uint32_t stm32f316re_info_flashint[REG_NUM][NUM_BASIC_INFO] = {

    {0x00000030, 1, 1, 1}, //0x00
    {0x00000000, 1, 1, 1}, //0x04
    {0x00000000, 1, 1, 1}, //0x08
    {0x00000000, 2, 1, 1}, //0x0c
    {0x00000080, 1, 1, 1}, //0x10
    {0x00000000, 3, 1, 1}, //0x14
    {0x00000000, 9, 1, 1}, //0x18
    {0x00000000, 1, 1, 1}, //0x1c
    {0xffffffff, 1, 1, 1}, //0x20
    {0x00000000, 9, 0xf, 0xf}, //end sign
};
//effective values
const uint32_t stm32f316re_val_flashint[REG_NUM][NUM_EFF_VAL] = {

    {   //0x00
		0x00000007, 0x00000008,
		0x00000010, 0x00000020
    },{ //0x04
		0xffffffff
    },{ //0x08
		0xffffffff
    },{ //0x0c
        0x00000001, 0x00000004,
        0x00000010, 0x00000020,
    },{ //0x10
        0x00000001, 0x00000002, 0x00000004,
        0x00000010, 0x00000020, 0x00000040, 0x00000080, 
        0x00000200, 0x00000400, 
        0x00001000, 0x00002000
    },{ //0x14
		0xffffffff
    },{ //0x18
    },{ //0x1c
		0x00000001, 0x00000006,
		0x00000100, 0x00000200, 0x00000400,
		0x00001000, 0x00002000, 0x00004000,
		0x00ff0000, 0xff000000
    },{ //0x20
		0xffffffff
    },{ //end-sign
		0xffffffff, 0xffffffff
    }
};


/******************** CRC *********************/
//register information
#define stm32f316re_base_crc 0x40023000
#define stm32f316re_size_crc KB
const uint32_t stm32f316re_info_crc[REG_NUM][NUM_BASIC_INFO] = {

    {0xffffffff, 3, 1, 1}, //0x00
    {0x00000000, 3, 1, 1}, //0x04
    {0x00000000, 1, 1, 1}, //0x08
    {0x00000000, 9, 1, 1}, //0x0c
    {0xffffffff, 3, 1, 1}, //0x10
    {0x04c11db7, 3, 1, 1}, //0x14
    {0x00000000, 9, 0xf, 0xf}, //end sign
};
//effective values
const uint32_t stm32f316re_val_crc[REG_NUM][NUM_EFF_VAL] = {

    {   //0x00
		0xffffffff
    },{ //0x04
        0x0000000f,
    },{ //0x08
		0x00000001, 
		0x00000018, 0x00000060, 0x00000080
    },{ //0x0c
    },{ //0x10
		0xffffffff
    },{ //0x14
		0x04c11db7
    },{ //end-sign
		0xffffffff, 0xffffffff
    }
};


/******************** TSC *********************/
//register information
#define stm32f316re_base_tsc 0x40024000
#define stm32f316re_size_tsc KB
const uint32_t stm32f316re_info_tsc[REG_NUM][NUM_BASIC_INFO] = {

    {0x00000000, 1, 1, 1}, //0x00
    {0x00000000, 1, 1, 1}, //0x04
    {0x00000000, 1, 1, 1}, //0x08
    {0x00000000, 2, 1, 1}, //0x0c
    {0xffffffff, 1, 1, 1}, //0x10
    {0x00000000, 9, 1, 1}, //0x14
    {0x00000000, 1, 1, 1}, //0x18
    {0x00000000, 9, 1, 1}, //0x1c
    {0x00000000, 1, 1, 1}, //0x20
    {0x00000000, 9, 1, 1}, //0x24
    {0x00000000, 1, 1, 1}, //0x28
    {0x00000000, 9, 1, 1}, //0x2c
    {0x00000000, 9, 1, 1}, //0x30
    {0x00000000, 3, 1, 1}, //0x34
    {0x00000000, 3, 1, 1}, //0x38
    {0x00000000, 3, 1, 1}, //0x3c
    {0x00000000, 3, 1, 1}, //0x40
    {0x00000000, 3, 1, 1}, //0x44
    {0x00000000, 3, 1, 1}, //0x48
    {0x00000000, 3, 1, 1}, //0x4c
    {0x00000000, 3, 1, 1}, //0x50
    {0x00000000, 9, 0xf, 0xf}, //end sign
};
//effective values
const uint32_t stm32f316re_val_tsc[REG_NUM][NUM_EFF_VAL] = {

    {   //0x00
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
        0x00000010, 0x000000e0, 
		0x00007000, 0x00008000,
		0x00010000,
		0x00fe0000, 
		0x0f000000,
		0xf0000000
    },{ //0x04
        0x00000001, 0x00000002
    },{ //0x08
        0x00000001, 0x00000002
    },{ //0x0c
        0x00000001, 0x00000002
    },{ //0x10
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
        0x00000010, 0x00000020, 0x00000040, 0x00000080,
        0x00000100, 0x00000200, 0x00000400, 0x00000800,
        0x00001000, 0x00002000, 0x00004000, 0x00008000,
        0x00010000, 0x00020000, 0x00040000, 0x00080000,
		0x00100000, 0x00200000, 0x00400000, 0x00800000,
		0x01000000, 0x02000000, 0x04000000, 0x08000000,
        0x10000000, 0x20000000, 0x40000000, 0x80000000
    },{ //0x14
    },{ //0x18
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
        0x00000010, 0x00000020, 0x00000040, 0x00000080,
        0x00000100, 0x00000200, 0x00000400, 0x00000800,
        0x00001000, 0x00002000, 0x00004000, 0x00008000,
        0x00010000, 0x00020000, 0x00040000, 0x00080000,
		0x00100000, 0x00200000, 0x00400000, 0x00800000,
		0x01000000, 0x02000000, 0x04000000, 0x08000000,
        0x10000000, 0x20000000, 0x40000000, 0x80000000
    },{ //0x1c
    },{ //0x20
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
        0x00000010, 0x00000020, 0x00000040, 0x00000080,
        0x00000100, 0x00000200, 0x00000400, 0x00000800,
        0x00001000, 0x00002000, 0x00004000, 0x00008000,
        0x00010000, 0x00020000, 0x00040000, 0x00080000,
		0x00100000, 0x00200000, 0x00400000, 0x00800000,
		0x01000000, 0x02000000, 0x04000000, 0x08000000,
        0x10000000, 0x20000000, 0x40000000, 0x80000000
    },{ //0x24
    },{ //0x28
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
        0x00000010, 0x00000020, 0x00000040, 0x00000080,
        0x00000100, 0x00000200, 0x00000400, 0x00000800,
        0x00001000, 0x00002000, 0x00004000, 0x00008000,
        0x00010000, 0x00020000, 0x00040000, 0x00080000,
		0x00100000, 0x00200000, 0x00400000, 0x00800000,
		0x01000000, 0x02000000, 0x04000000, 0x08000000,
        0x10000000, 0x20000000, 0x40000000, 0x80000000
    },{ //0x2c
    },{ //0x30
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
        0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00010000, 0x00020000, 0x00040000, 0x00080000,
		0x00100000, 0x00200000, 0x00400000, 0x00800000
    },{ //0x34
        0x00000fff
    },{ //0x38
        0x00000fff
    },{ //0x3c
        0x00000fff
    },{ //0x40
        0x00000fff
    },{ //0x44
        0x00000fff
    },{ //0x48
        0x00000fff
    },{ //0x4c
        0x00000fff
    },{ //0x50
		0x00000fff
	},{ //end-sign
		0xffffffff, 0xffffffff
	}
};


/******************** GPIOA-H *********************/
//register information
#define stm32f316re_base_gpioa 0x48001c00
#define stm32f316re_base_gpiob 0x48001800
#define stm32f316re_base_gpioc 0x48001400
#define stm32f316re_base_gpiod 0x48001000
#define stm32f316re_base_gpioe 0x48000c00
#define stm32f316re_base_gpiof 0x48000800
#define stm32f316re_base_gpiog 0x48000400
#define stm32f316re_base_gpioh 0x48000000
#define stm32f316re_size_gpioa KB 
#define stm32f316re_size_gpiob KB 
#define stm32f316re_size_gpioc KB 
#define stm32f316re_size_gpiod KB 
#define stm32f316re_size_gpioe KB 
#define stm32f316re_size_gpiof KB 
#define stm32f316re_size_gpiog KB 
#define stm32f316re_size_gpioh KB 
const uint32_t stm32f316re_info_gpioa[REG_NUM][NUM_BASIC_INFO] = {

    {0xa8000000, 1, 1, 1}, //0x00
    {0x00000000, 1, 1, 1}, //0x04
    {0x0c000000, 1, 1, 1}, //0x08
    {0x64000000, 1, 1, 1}, //0x0c
    {0x00000000, 3, 1, 1}, //0x10
    {0x00000000, 3, 1, 1}, //0x14
    {0x00000000, 1, 1, 1}, //0x18
    {0x00000000, 1, 1, 1}, //0x1c
    {0x00000000, 1, 1, 1}, //0x20
    {0x00000000, 1, 1, 1}, //0x24
    {0x00000000, 1, 1, 1}, //0x28
    {0x00000000, 9, 0xf, 0xf}, //end sign
};
const uint32_t stm32f316re_info_gpiob[REG_NUM][NUM_BASIC_INFO] = {

    {0x00000280, 1, 1, 1}, //0x00
    {0x00000000, 1, 1, 1}, //0x04
    {0x000000c0, 1, 1, 1}, //0x08
    {0x00000100, 1, 1, 1}, //0x0c
    {0x00000000, 3, 1, 1}, //0x10
    {0x00000000, 3, 1, 1}, //0x14
    {0x00000000, 1, 1, 1}, //0x18
    {0x00000000, 1, 1, 1}, //0x1c
    {0x00000000, 1, 1, 1}, //0x20
    {0x00000000, 1, 1, 1}, //0x24
    {0x00000000, 1, 1, 1}, //0x28
    {0x00000000, 9, 0xf, 0xf}, //end sign
};
const uint32_t stm32f316re_info_gpioo[REG_NUM][NUM_BASIC_INFO] = { //other

    {0x00000000, 1, 1, 1}, //0x00
    {0x00000000, 1, 1, 1}, //0x04
    {0x00000000, 1, 1, 1}, //0x08
    {0x00000000, 1, 1, 1}, //0x0c
    {0x00000000, 3, 1, 1}, //0x10
    {0x00000000, 3, 1, 1}, //0x14
    {0x00000000, 1, 1, 1}, //0x18
    {0x00000000, 1, 1, 1}, //0x1c
    {0x00000000, 1, 1, 1}, //0x20
    {0x00000000, 1, 1, 1}, //0x24
    {0x00000000, 1, 1, 1}, //0x28
    {0x00000000, 9, 0xf, 0xf}, //end sign
};
//effective values
/*
 * Common for gpioa/b/other
 */
const uint32_t stm32f316re_val_gpio[REG_NUM][NUM_EFF_VAL] = {

    {   //0x00
		0x00000003, 0x0000000c,
		0x00000030, 0x000000c0,
		0x00000300, 0x00000c00,
		0x00003000, 0x0000c000,
		0x00030000, 0x000c0000,
		0x00300000, 0x00c00000,
		0x03000000, 0x0c000000,
		0x30000000, 0xc0000000
    },{ //0x04
		0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00001000, 0x00002000, 0x00004000, 0x00008000
    },{ //0x08
		0x00000003, 0x0000000c,
		0x00000030, 0x000000c0,
		0x00000300, 0x00000c00,
		0x00003000, 0x0000c000,
		0x00030000, 0x000c0000,
		0x00300000, 0x00c00000,
		0x03000000, 0x0c000000,
		0x30000000, 0xc0000000
    },{ //0x0c
		0x00000003, 0x0000000c,
		0x00000030, 0x000000c0,
		0x00000300, 0x00000c00,
		0x00003000, 0x0000c000,
		0x00030000, 0x000c0000,
		0x00300000, 0x00c00000,
		0x03000000, 0x0c000000,
		0x30000000, 0xc0000000
    },{ //0x10
		0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00001000, 0x00002000, 0x00004000, 0x00008000
    },{ //0x14
		0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00001000, 0x00002000, 0x00004000, 0x00008000
    },{ //0x18
		0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00001000, 0x00002000, 0x00004000, 0x00008000,
		0x00010000, 0x00020000, 0x00040000, 0x00080000,
		0x00100000, 0x00200000, 0x00400000, 0x00800000,
		0x01000000, 0x02000000, 0x04000000, 0x08000000,
		0x10000000, 0x20000000, 0x40000000, 0x80000000
    },{ //0x1c
		0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000020, 0x00000040, 0x00000080,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00001000, 0x00002000, 0x00004000, 0x00008000,
		0x00010000
    },{ //0x20
		0x0000000f, 0x000000f0, 0x00000f00, 0x0000f000,
		0x000f0000, 0x00f00000, 0x0f000000, 0xf0000000
    },{ //0x24
		0x0000000f, 0x000000f0, 0x00000f00, 0x0000f000,
		0x000f0000, 0x00f00000, 0x0f000000, 0xf0000000
    },{ //0x28
		0x00000003, 0x0000000c,
		0x00000030, 0x000000c0,
		0x00000300, 0x00000c00,
		0x00003000, 0x0000c000,
		0x00030000, 0x000c0000,
		0x00300000, 0x00c00000,
		0x03000000, 0x0c000000,
		0x30000000, 0xc0000000
    },{ //end-sign
		0xffffffff, 0xffffffff
    }
};


/******************** ADC1/2 /3/4*********************/
//register information
#define stm32f316re_base_adc1 0x50000000
#define stm32f316re_base_adc3 0x50000400
#define stm32f316re_size_adc1 KB 
#define stm32f316re_size_adc3 KB 
const uint32_t stm32f316re_info_adc[REG_NUM][NUM_BASIC_INFO] = {

    {0x00000000, 2, 1, 1}, //0x00
    {0x00000000, 9, 1, 1}, //0x04
    {0x02000000, 1, 1, 1}, //0x08
    {0x00000000, 3, 1, 1}, //0x0c
    {0x00000000, 9, 1, 1}, //0x10
    {0x00000000, 1, 1, 1}, //0x14
    {0x00000000, 1, 1, 1}, //0x18
    {0x00000000, 9, 1, 1}, //0x1c
    {0x0fff0000, 3, 1, 1}, //0x20
    {0x00ff0000, 3, 1, 1}, //0x24
    {0x00ff0000, 3, 1, 1}, //0x28
    {0x00000000, 3, 1, 1}, //0x2c
    {0x00000000, 3, 1, 1}, //0x30
    {0x00000000, 3, 1, 1}, //0x34
    {0x00000000, 3, 1, 1}, //0x38
    {0x00000000, 3, 1, 1}, //0x3c
    {0x00000000, 3, 1, 1}, //0x40
    {0x00000000, 9, 1, 1}, //0x44
    {0x00000000, 9, 1, 1}, //0x48
    {0x00000000, 3, 1, 1}, //0x4c
	//0x50-0xb4 = {0}
	[0x14 ... 0x2d] = {0x00000000, 3, 1, 1},
    {0x00000000, 9, 0xf, 0xf}, //end sign
};
//effective values
const uint32_t stm32f316re_val_adc[REG_NUM][NUM_EFF_VAL] = {

    {   //0x00
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
        0x00000010, 0x00000020, 0x00000040, 0x00000080,
        0x00000100, 0x00000200, 0x00000400
    },{ //0x04
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
        0x00000010, 0x00000020, 0x00000040, 0x00000080,
        0x00000100, 0x00000200, 0x00000400
    },{ //0x08
        0x00000001, 0x00000002, 0x00000004, 0x00000008,
        0x00000010, 0x00000020, 
		0x30000000, 0x40000000, 0x80000000
    },{ //0x0c
        0x00000001, 0x00000002,
        0x00000018, 0x00000020,
		0x000003c0, 0x00000c00,
		0x00001000, 0x00002000, 0x00004000,
		0x00010000, 0x000e0000,
		0x00100000, 0x00200000, 0x00400000, 0x00800000,
		0x01000000, 0x02000000,
		0x7c000000
    },{ //0x10
    },{ //0x14
		0x00000038, 
		0x000001c0,	0x00000e00,
		0x00007000, 
		0x00038000,
		0x001c0000, 0x00e00000,
		0x07000000,
		0x38000000
    },{ //0x18
		0x00000007,
		0x00000038, 
		0x000001c0,	0x00000e00,
		0x00007000, 
		0x00038000,
		0x001c0000, 0x00e00000,
		0x07000000
    },{ //0x1c
    },{ //0x20
		0x00000fff, 
		0x0fff0000
    },{ //0x24
		0x000000ff,
		0x00ff0000
    },{ //0x28
		0x000000ff,
		0x00ff0000
    },{ //0x2c
    },{ //0x30
		0x0000000f,
		0x000007c0,
		0x00001f00,
		0x007c0000,
		0x1f000000
    },{ //0x34
		0x0000001f,
		0x000007c0,
		0x00001f00,
		0x007c0000,
		0x1f000000
    },{ //0x38
		0x0000001f,
		0x000007c0,
		0x00001f00,
		0x007c0000,
		0x1f000000
    },{ //0x3c
		0x0000001f,
		0x000007c0
    },{ //0x40
        0x0000ffff
    },{ //0x44
    },{ //0x48
    },{ //0x4c
		0x00000002, 
		0x0000003c, 0x000000c0,
		0x00001f00, 0x0007c000,
		0x001f0000, 0x7c000000
    },{ //0x50
	},{ //0x54
	},{ //0x58
	},{ //0x5c
	},{ //0x60
		0x00000fff, 0x7c000000, 0x80000000
	},{ //0x64
		0x00000fff, 0x7c000000, 0x80000000
	},{ //0x68
		0x00000fff, 0x7c000000, 0x80000000
	},{ //0x6c
		0x00000fff, 0x7c000000, 0x80000000
	},{ //0x70
	},{ //0x74
	},{ //0x78
	},{ //0x7c
	},{ //0x80
		0x0000ffff
	},{ //0x84
		0x0000ffff
	},{ //0x88
		0x0000ffff
	},{ //0x8c
		0x0000ffff
	},{ //0x90
	},{ //0x94
	},{ //0x98
	},{ //0x9c
	},{ //0xa0
		0x0007fffe
	},{ //0xa4
		0x0007fffe
	},{ //0xa8
	},{ //0xac
	},{ //0xb0
		0x0007fffe
	},{ //0xb4
		0x0000007f,
		0x007f0000
	},{ //end-sign
		0xffffffff, 0xffffffff
	}
};


/******************** FMC banks 1&2/3&4/control register *********************/
//register information
#define stm32f316re_base_fmctr 0x60000000
#define stm32f316re_base_fmcb3 0x80000400
#define stm32f316re_base_fmcb1 0xa0000400
#define stm32f316re_size_fmctr 512 * MB 
#define stm32f316re_size_fmcb3 512 * MB 
#define stm32f316re_size_fmcb1 4 * KB 
const uint32_t stm32f316re_info_fmcb1[REG_NUM][NUM_BASIC_INFO] = {

    {0x000030db, 1, 1, 1}, //0x00
    {0x0fffffff, 1, 1, 1}, //0x04
    {0x000030db, 1, 1, 1}, //0x08
    {0x0fffffff, 1, 1, 1}, //0x0c
    {0x000030db, 2, 1, 1}, //0x10
    {0x0fffffff, 1, 1, 1}, //0x14
    {0x000030db, 1, 1, 1}, //0x18
    {0x0fffffff, 1, 1, 1}, //0x1c
	[0x18] = {0x00000018, 1, 1, 1},  //0x60
	[0x19] = {0x00000040, 2, 1, 1},  //0x64
	[0x1a] = {0xfcfcfcfc, 3, 1, 1},  //0x68
	[0x1b] = {0xfcfcfcfc, 3, 1, 1},  //0x6c
	[0x1d] = {0x00000000, 3, 1, 0},  //0x74
	[0x20] = {0x00000018, 1, 1, 1},  //0x80
	[0x21] = {0x00000040, 2, 1, 1},  //0x84
	[0x22] = {0xfcfcfcfc, 3, 1, 1},  //0x88
	[0x23] = {0xfcfcfcfc, 3, 1, 1},  //0x8c
	[0x25] = {0x00000000, 3, 1, 0},  //0x94
	[0x28] = {0x00000018, 1, 1, 1},  //0xa0
	[0x29] = {0x00000040, 2, 1, 1},  //0xa4
	[0x2a] = {0xfcfcfcfc, 3, 1, 1},  //0xa8
	[0x2b] = {0xfcfcfcfc, 3, 1, 1},  //0xac
	[0x2c] = {0xfcfcfcfc, 3, 1, 1},  //0xb0
	[0x41] = {0x0fffffff, 1, 1, 1},  //0x104
	[0x43] = {0x0fffffff, 1, 1, 1},  //0x10c
	[0x45] = {0x0fffffff, 1, 1, 1},	 //0x114
	[0x47] = {0x0fffffff, 1, 1, 1},  //0x11c
    {0x00000000, 9, 0xf, 0xf} //end sign
};
//effective values
const uint32_t stm32f316re_val_fmcb1[REG_NUM][NUM_EFF_VAL] = {

    {   //0x00
        0x00000001, 0x00000002, 0x0000000c,
        0x00000030, 0x00000040, 0x00000080,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00001000, 0x00002000, 0x00004000, 0x00008000,
		0x00080000,
		0x00100000
    },{ //0x04
		0x0000000f, 0x000000f0, 
		0x0000ff00,
		0x000f0000, 0x00f00000, 0x0f000000,
		0x30000000
    },{ //0x08
        0x00000001, 0x00000002, 0x0000000c,
        0x00000030, 0x00000040, 0x00000080,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00001000, 0x00002000, 0x00004000, 0x00008000,
		0x00080000,
		0x00100000
    },{ //0x0c
		0x0000000f, 0x000000f0, 
		0x0000ff00,
		0x000f0000, 0x00f00000, 0x0f000000,
		0x30000000
    },{ //0x10
        0x00000001, 0x00000002, 0x0000000c,
        0x00000030, 0x00000040, 0x00000080,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00001000, 0x00002000, 0x00004000, 0x00008000,
		0x00080000,
    },{ //0x14
		0x0000000f, 0x000000f0, 
		0x0000ff00,
		0x000f0000, 0x00f00000, 0x0f000000,
		0x30000000
    },{ //0x18
        0x00000001, 0x00000002, 0x0000000c,
        0x00000030, 0x00000040, 0x00000080,
		0x00000100, 0x00000200, 0x00000400, 0x00000800,
		0x00001000, 0x00002000, 0x00004000, 0x00008000,
		0x00080000,
    },{ //0x1c
		0x0000000f, 0x000000f0, 
		0x0000ff00,
		0x000f0000, 0x00f00000, 0x0f000000,
		0x30000000
    },

	[0x18] = { //0x
		0x00000002, 0x00000004, 0x00000008,
		0x00000030, 0x00000040,
		0x00001e00, 
		0x0001e000,
		0x00e00000
	},[0x19] = {
		0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000020, 0x00000040
	},[0x1a] = {
		0x000000ff, 0x0000ff00, 0x00ff0000, 0xff000000
	},[0x1b] = {
		0x000000ff, 0x0000ff00, 0x00ff0000, 0xff000000
	},
	[0x1d] = {
		0xffffffff
	},
	[0x20] = {
		0x00000002, 0x00000004, 0x00000008,
		0x00000030, 0x00000040,
		0x00001e00, 
		0x0001e000,
		0x00e00000
	},[0x21] = {
		0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000020, 0x00000040
	},[0x22] = {
		0x000000ff, 0x0000ff00, 0x00ff0000, 0xff000000
	},[0x23] = {
		0x000000ff, 0x0000ff00, 0x00ff0000, 0xff000000
	},
	[0x25] = {
		0xffffffff
	},
	[0x28] = {
		0x00000002, 0x00000004, 0x00000008,
		0x00000030, 0x00000040,
		0x00001e00, 
		0x0001e000,
		0x00e00000
	},[0x29] = {
		0x00000001, 0x00000002, 0x00000004, 0x00000008,
		0x00000010, 0x00000020, 0x00000040
	},[0x2a] = {
		0x000000ff, 0x0000ff00, 0x00ff0000, 0xff000000
	},[0x2b] = {
		0x000000ff, 0x0000ff00, 0x00ff0000, 0xff000000
	},[0x2c] = {
		0x000000ff, 0x0000ff00, 0x00ff0000, 0xff000000
	},
	[0x41] = {
		0x0000000f, 0x000000f0, 
		0x0000ff00,
		0x30000000
	},[0x43] = {
		0x0000000f, 0x000000f0, 
		0x0000ff00,
		0x30000000
	},[0x45] = {
		0x0000000f, 0x000000f0, 
		0x0000ff00,
		0x30000000
	},[0x47] = { // 0x11c
		0x0000000f, 0x000000f0, 
		0x0000ff00,
		0x30000000
	},{ //end-sign
		0xffffffff, 0xffffffff
	}
};

/*
 * The pointer array used to contruct stm32fxx database
 */
//base addr arrary
uint32_t stm32f316re_base[PERI_NUM] = {

	stm32f316re_base_tim2,
	stm32f316re_base_tim3,
	stm32f316re_base_tim4,
	stm32f316re_base_tim6,
	stm32f316re_base_tim7,
	stm32f316re_base_rtc,
	stm32f316re_base_wwdg,
	stm32f316re_base_iwdg,
	stm32f316re_base_i2s2ext,
	stm32f316re_base_spi2,
	stm32f316re_base_spi3,
	stm32f316re_base_i2s3ext,
	stm32f316re_base_usart3,
	stm32f316re_base_usart2,
	stm32f316re_base_uart4,
	stm32f316re_base_uart5,
	stm32f316re_base_i2c1,
	stm32f316re_base_i2c2,
	stm32f316re_base_usbfs,
	stm32f316re_base_usbsram,
	stm32f316re_base_bxcan,
	stm32f316re_base_pwr,
	stm32f316re_base_dac1,
	stm32f316re_base_i2c3,
	stm32f316re_base_syscfs,
	stm32f316re_base_exti,
	stm32f316re_base_tim1,
	stm32f316re_base_spi1,
	stm32f316re_base_tim8,
	stm32f316re_base_usart1,
	stm32f316re_base_spi4,
	stm32f316re_base_tim15,
	stm32f316re_base_tim16,
	stm32f316re_base_tim17,
	stm32f316re_base_tim20,
	stm32f316re_base_dma1,
	stm32f316re_base_dma2,
	stm32f316re_base_rcc,
	stm32f316re_base_flashint,
	stm32f316re_base_crc,
	stm32f316re_base_tsc,
	stm32f316re_base_gpioa,
	stm32f316re_base_gpiob,
	stm32f316re_base_gpioc,
	stm32f316re_base_gpiod,
	stm32f316re_base_gpioe,
	stm32f316re_base_gpiof,
	stm32f316re_base_gpiog,
	stm32f316re_base_gpioh,
	stm32f316re_base_adc1,
	stm32f316re_base_adc3,
	stm32f316re_base_fmctr,
	stm32f316re_base_fmcb3,
	stm32f316re_base_fmcb1
};

/*
 * The pointer array including the length of peripheral
 */
//base addr arrary
uint32_t stm32f316re_size[PERI_NUM] = {

	stm32f316re_size_tim2,
	stm32f316re_size_tim3,
	stm32f316re_size_tim4,
	stm32f316re_size_tim6,
	stm32f316re_size_tim7,
	stm32f316re_size_rtc,
	stm32f316re_size_wwdg,
	stm32f316re_size_iwdg,
	stm32f316re_size_i2s2ext,
	stm32f316re_size_spi2,
	stm32f316re_size_spi3,
	stm32f316re_size_i2s3ext,
	stm32f316re_size_usart3,
	stm32f316re_size_usart2,
	stm32f316re_size_uart4,
	stm32f316re_size_uart5,
	stm32f316re_size_i2c1,
	stm32f316re_size_i2c2,
	stm32f316re_size_usbfs,
	stm32f316re_size_usbsram,
	stm32f316re_size_bxcan,
	stm32f316re_size_pwr,
	stm32f316re_size_dac1,
	stm32f316re_size_i2c3,
	stm32f316re_size_syscfs,
	stm32f316re_size_exti,
	stm32f316re_size_tim1,
	stm32f316re_size_spi1,
	stm32f316re_size_tim8,
	stm32f316re_size_usart1,
	stm32f316re_size_spi4,
	stm32f316re_size_tim15,
	stm32f316re_size_tim16,
	stm32f316re_size_tim17,
	stm32f316re_size_tim20,
	stm32f316re_size_dma1,
	stm32f316re_size_dma2,
	stm32f316re_size_rcc,
	stm32f316re_size_flashint,
	stm32f316re_size_crc,
	stm32f316re_size_tsc,
	stm32f316re_size_gpioa,
	stm32f316re_size_gpiob,
	stm32f316re_size_gpioc,
	stm32f316re_size_gpiod,
	stm32f316re_size_gpioe,
	stm32f316re_size_gpiof,
	stm32f316re_size_gpiog,
	stm32f316re_size_gpioh,
	stm32f316re_size_adc1,
	stm32f316re_size_adc3,
	stm32f316re_size_fmctr,
	stm32f316re_size_fmcb3,
	stm32f316re_size_fmcb1
};

/*
 * Pointer array which point to array
 * which contains the resetval/type/is_special info
 * of every peripheral register
 */
uint32_t *stm32f316re_info[PERI_NUM] = {

	stm32f316re_info_tim2,
	stm32f316re_info_tim2,
	stm32f316re_info_tim2,
	stm32f316re_info_tim6,
	stm32f316re_info_tim6,
	stm32f316re_info_rtc,
	stm32f316re_info_wwdg,
	stm32f316re_info_iwdg,
	stm32f316re_info_spi2,
	stm32f316re_info_spi2,
	stm32f316re_info_spi2,
	stm32f316re_info_spi2,
	stm32f316re_info_usart2,
	stm32f316re_info_usart2,
	stm32f316re_info_usart2,
	stm32f316re_info_usart2,
	stm32f316re_info_i2c1,
	stm32f316re_info_i2c1,
	stm32f316re_info_usbfs,
	stm32f316re_info_usbfs,
	stm32f316re_info_bxcan,
	stm32f316re_info_pwr,
	stm32f316re_info_dac1,
	stm32f316re_info_i2c3,
	stm32f316re_info_syscfs,
	stm32f316re_info_exti,
	stm32f316re_info_tim1,
	stm32f316re_info_spi1,
	stm32f316re_info_tim8,
	stm32f316re_info_usart1,
	stm32f316re_info_spi4,
	stm32f316re_info_tim15,
	stm32f316re_info_tim16,
	stm32f316re_info_tim16,
	stm32f316re_info_tim16,
	stm32f316re_info_dma,
	stm32f316re_info_dma,
	stm32f316re_info_rcc,
	stm32f316re_info_flashint,
	stm32f316re_info_crc,
	stm32f316re_info_tsc,
	stm32f316re_info_gpioa,
	stm32f316re_info_gpiob,
	stm32f316re_info_gpioo,
	stm32f316re_info_gpioo,
	stm32f316re_info_gpioo,
	stm32f316re_info_gpioo,
	stm32f316re_info_gpioo,
	stm32f316re_info_gpioo,
	stm32f316re_info_adc,
	stm32f316re_info_adc,
	stm32f316re_info_fmcb1,
	stm32f316re_info_fmcb1,
	stm32f316re_info_fmcb1
};
/*
 * Pointer array point to array which contain the effective
 * values of every peripheral values
 */
uint32_t *stm32f316re_val[PERI_NUM] = {

	stm32f316re_val_tim2,
	stm32f316re_val_tim2,
	stm32f316re_val_tim2,
	stm32f316re_val_tim6,
	stm32f316re_val_tim6,
	stm32f316re_val_rtc,
	stm32f316re_val_wwdg,
	stm32f316re_val_iwdg,
	stm32f316re_val_spi2,
	stm32f316re_val_spi2,
	stm32f316re_val_spi2,
	stm32f316re_val_spi2,
	stm32f316re_val_usart2,
	stm32f316re_val_usart2,
	stm32f316re_val_usart2,
	stm32f316re_val_usart2,
	stm32f316re_val_i2c1,
	stm32f316re_val_i2c1,
	stm32f316re_val_usbfs,
	stm32f316re_val_usbfs,
	stm32f316re_val_bxcan,
	stm32f316re_val_pwr,
	stm32f316re_val_dac1,
	stm32f316re_val_i2c3,
	stm32f316re_val_syscfs,
	stm32f316re_val_exti,
	stm32f316re_val_tim1,
	stm32f316re_val_spi1,
	stm32f316re_val_tim8,
	stm32f316re_val_usart1,
	stm32f316re_val_spi4,
	stm32f316re_val_tim15,
	stm32f316re_val_tim16,
	stm32f316re_val_tim16,
	stm32f316re_val_tim16,
	stm32f316re_val_dma,
	stm32f316re_val_dma,
	stm32f316re_val_rcc,
	stm32f316re_val_flashint,
	stm32f316re_val_crc,
	stm32f316re_val_tsc,
	stm32f316re_val_gpio,
	stm32f316re_val_gpio,
	stm32f316re_val_gpio,
	stm32f316re_val_gpio,
	stm32f316re_val_gpio,
	stm32f316re_val_gpio,
	stm32f316re_val_gpio,
	stm32f316re_val_gpio,
	stm32f316re_val_adc,
	stm32f316re_val_adc,
	stm32f316re_val_fmcb1,
	stm32f316re_val_fmcb1,
	stm32f316re_val_fmcb1
};



#endif   //__DATA_TABLE__

